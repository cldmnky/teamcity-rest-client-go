// Code generated by go-swagger; DO NOT EDIT.

package project

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new project API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for project API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	PutAppRestProjectsProjectLocatorParametersName(params *PutAppRestProjectsProjectLocatorParametersNameParams, authInfo runtime.ClientAuthInfoWriter) (*PutAppRestProjectsProjectLocatorParametersNameOK, error)

	PutAppRestProjectsProjectLocatorProjectFeaturesFeatureLocatorPropertiesName(params *PutAppRestProjectsProjectLocatorProjectFeaturesFeatureLocatorPropertiesNameParams, authInfo runtime.ClientAuthInfoWriter) (*PutAppRestProjectsProjectLocatorProjectFeaturesFeatureLocatorPropertiesNameOK, error)

	Add(params *AddParams, authInfo runtime.ClientAuthInfoWriter) (*AddOK, error)

	CreateBuildType(params *CreateBuildTypeParams, authInfo runtime.ClientAuthInfoWriter) (*CreateBuildTypeOK, error)

	CreateBuildTypeTemplate(params *CreateBuildTypeTemplateParams, authInfo runtime.ClientAuthInfoWriter) (*CreateBuildTypeTemplateOK, error)

	CreateProject(params *CreateProjectParams, authInfo runtime.ClientAuthInfoWriter) (*CreateProjectOK, error)

	CreateSecureToken(params *CreateSecureTokenParams, authInfo runtime.ClientAuthInfoWriter) (*CreateSecureTokenOK, error)

	Delete(params *DeleteParams, authInfo runtime.ClientAuthInfoWriter) error

	DeleteAllParameters(params *DeleteAllParametersParams, authInfo runtime.ClientAuthInfoWriter) error

	DeleteProject(params *DeleteProjectParams, authInfo runtime.ClientAuthInfoWriter) error

	DeleteProjectAgentPools(params *DeleteProjectAgentPoolsParams, authInfo runtime.ClientAuthInfoWriter) error

	Get(params *GetParams, authInfo runtime.ClientAuthInfoWriter) (*GetOK, error)

	GetBranches(params *GetBranchesParams, authInfo runtime.ClientAuthInfoWriter) (*GetBranchesOK, error)

	GetBuildTypesOrder(params *GetBuildTypesOrderParams, authInfo runtime.ClientAuthInfoWriter) (*GetBuildTypesOrderOK, error)

	GetDefaultTemplate(params *GetDefaultTemplateParams, authInfo runtime.ClientAuthInfoWriter) (*GetDefaultTemplateOK, error)

	GetExampleNewProjectDescription(params *GetExampleNewProjectDescriptionParams, authInfo runtime.ClientAuthInfoWriter) (*GetExampleNewProjectDescriptionOK, error)

	GetExampleNewProjectDescriptionCompatibilityVersion1(params *GetExampleNewProjectDescriptionCompatibilityVersion1Params, authInfo runtime.ClientAuthInfoWriter) (*GetExampleNewProjectDescriptionCompatibilityVersion1OK, error)

	GetParameter(params *GetParameterParams, authInfo runtime.ClientAuthInfoWriter) (*GetParameterOK, error)

	GetParameterType(params *GetParameterTypeParams, authInfo runtime.ClientAuthInfoWriter) (*GetParameterTypeOK, error)

	GetParameterTypeRawValue(params *GetParameterTypeRawValueParams, authInfo runtime.ClientAuthInfoWriter) (*GetParameterTypeRawValueOK, error)

	GetParameterValueLong(params *GetParameterValueLongParams, authInfo runtime.ClientAuthInfoWriter) (*GetParameterValueLongOK, error)

	GetParameters(params *GetParametersParams, authInfo runtime.ClientAuthInfoWriter) (*GetParametersOK, error)

	GetParentProject(params *GetParentProjectParams, authInfo runtime.ClientAuthInfoWriter) (*GetParentProjectOK, error)

	GetProjectAgentPools(params *GetProjectAgentPoolsParams, authInfo runtime.ClientAuthInfoWriter) (*GetProjectAgentPoolsOK, error)

	GetProjectsOrder(params *GetProjectsOrderParams, authInfo runtime.ClientAuthInfoWriter) (*GetProjectsOrderOK, error)

	GetSecureValue(params *GetSecureValueParams, authInfo runtime.ClientAuthInfoWriter) (*GetSecureValueOK, error)

	GetSingle(params *GetSingleParams, authInfo runtime.ClientAuthInfoWriter) (*GetSingleOK, error)

	ReloadSettingsFile(params *ReloadSettingsFileParams, authInfo runtime.ClientAuthInfoWriter) (*ReloadSettingsFileOK, error)

	RemoveDefaultTemplate(params *RemoveDefaultTemplateParams, authInfo runtime.ClientAuthInfoWriter) error

	Replace(params *ReplaceParams, authInfo runtime.ClientAuthInfoWriter) (*ReplaceOK, error)

	ReplaceAll(params *ReplaceAllParams, authInfo runtime.ClientAuthInfoWriter) (*ReplaceAllOK, error)

	ServeBuildFieldWithProject(params *ServeBuildFieldWithProjectParams, authInfo runtime.ClientAuthInfoWriter) (*ServeBuildFieldWithProjectOK, error)

	ServeBuildType(params *ServeBuildTypeParams, authInfo runtime.ClientAuthInfoWriter) (*ServeBuildTypeOK, error)

	ServeBuildTypeFieldWithProject(params *ServeBuildTypeFieldWithProjectParams, authInfo runtime.ClientAuthInfoWriter) (*ServeBuildTypeFieldWithProjectOK, error)

	ServeBuildTypeTemplates(params *ServeBuildTypeTemplatesParams, authInfo runtime.ClientAuthInfoWriter) (*ServeBuildTypeTemplatesOK, error)

	ServeBuildTypesInProject(params *ServeBuildTypesInProjectParams, authInfo runtime.ClientAuthInfoWriter) (*ServeBuildTypesInProjectOK, error)

	ServeBuildWithProject(params *ServeBuildWithProjectParams, authInfo runtime.ClientAuthInfoWriter) (*ServeBuildWithProjectOK, error)

	ServeBuilds(params *ServeBuildsParams, authInfo runtime.ClientAuthInfoWriter) (*ServeBuildsOK, error)

	ServeProject(params *ServeProjectParams, authInfo runtime.ClientAuthInfoWriter) (*ServeProjectOK, error)

	ServeProjectField(params *ServeProjectFieldParams, authInfo runtime.ClientAuthInfoWriter) (*ServeProjectFieldOK, error)

	ServeProjects(params *ServeProjectsParams, authInfo runtime.ClientAuthInfoWriter) (*ServeProjectsOK, error)

	ServeTemplatesInProject(params *ServeTemplatesInProjectParams, authInfo runtime.ClientAuthInfoWriter) (*ServeTemplatesInProjectOK, error)

	SetBuildTypesOrder(params *SetBuildTypesOrderParams, authInfo runtime.ClientAuthInfoWriter) (*SetBuildTypesOrderOK, error)

	SetDefaultTemplate(params *SetDefaultTemplateParams, authInfo runtime.ClientAuthInfoWriter) (*SetDefaultTemplateOK, error)

	SetParameter(params *SetParameterParams, authInfo runtime.ClientAuthInfoWriter) (*SetParameterOK, error)

	SetParameterType(params *SetParameterTypeParams, authInfo runtime.ClientAuthInfoWriter) (*SetParameterTypeOK, error)

	SetParameterTypeRawValue(params *SetParameterTypeRawValueParams, authInfo runtime.ClientAuthInfoWriter) (*SetParameterTypeRawValueOK, error)

	SetParameterValueLong(params *SetParameterValueLongParams, authInfo runtime.ClientAuthInfoWriter) (*SetParameterValueLongOK, error)

	SetParameters(params *SetParametersParams, authInfo runtime.ClientAuthInfoWriter) (*SetParametersOK, error)

	SetParentProject(params *SetParentProjectParams, authInfo runtime.ClientAuthInfoWriter) (*SetParentProjectOK, error)

	SetProjectAgentPools(params *SetProjectAgentPoolsParams, authInfo runtime.ClientAuthInfoWriter) (*SetProjectAgentPoolsOK, error)

	SetProjectField(params *SetProjectFieldParams, authInfo runtime.ClientAuthInfoWriter) (*SetProjectFieldOK, error)

	SetProjectsOrder(params *SetProjectsOrderParams, authInfo runtime.ClientAuthInfoWriter) (*SetProjectsOrderOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  PutAppRestProjectsProjectLocatorParametersName put app rest projects project locator parameters name API
*/
func (a *Client) PutAppRestProjectsProjectLocatorParametersName(params *PutAppRestProjectsProjectLocatorParametersNameParams, authInfo runtime.ClientAuthInfoWriter) (*PutAppRestProjectsProjectLocatorParametersNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutAppRestProjectsProjectLocatorParametersNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutAppRestProjectsProjectLocatorParametersName",
		Method:             "PUT",
		PathPattern:        "/app/rest/projects/{projectLocator}/parameters/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutAppRestProjectsProjectLocatorParametersNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutAppRestProjectsProjectLocatorParametersNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutAppRestProjectsProjectLocatorParametersName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutAppRestProjectsProjectLocatorProjectFeaturesFeatureLocatorPropertiesName put app rest projects project locator project features feature locator properties name API
*/
func (a *Client) PutAppRestProjectsProjectLocatorProjectFeaturesFeatureLocatorPropertiesName(params *PutAppRestProjectsProjectLocatorProjectFeaturesFeatureLocatorPropertiesNameParams, authInfo runtime.ClientAuthInfoWriter) (*PutAppRestProjectsProjectLocatorProjectFeaturesFeatureLocatorPropertiesNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutAppRestProjectsProjectLocatorProjectFeaturesFeatureLocatorPropertiesNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutAppRestProjectsProjectLocatorProjectFeaturesFeatureLocatorPropertiesName",
		Method:             "PUT",
		PathPattern:        "/app/rest/projects/{projectLocator}/projectFeatures/{featureLocator}/properties/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutAppRestProjectsProjectLocatorProjectFeaturesFeatureLocatorPropertiesNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutAppRestProjectsProjectLocatorProjectFeaturesFeatureLocatorPropertiesNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutAppRestProjectsProjectLocatorProjectFeaturesFeatureLocatorPropertiesName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  Add add API
*/
func (a *Client) Add(params *AddParams, authInfo runtime.ClientAuthInfoWriter) (*AddOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "add",
		Method:             "POST",
		PathPattern:        "/app/rest/projects/{projectLocator}/projectFeatures",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for add: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateBuildType create build type API
*/
func (a *Client) CreateBuildType(params *CreateBuildTypeParams, authInfo runtime.ClientAuthInfoWriter) (*CreateBuildTypeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateBuildTypeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createBuildType",
		Method:             "POST",
		PathPattern:        "/app/rest/projects/{projectLocator}/buildTypes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateBuildTypeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateBuildTypeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createBuildType: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateBuildTypeTemplate create build type template API
*/
func (a *Client) CreateBuildTypeTemplate(params *CreateBuildTypeTemplateParams, authInfo runtime.ClientAuthInfoWriter) (*CreateBuildTypeTemplateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateBuildTypeTemplateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createBuildTypeTemplate",
		Method:             "POST",
		PathPattern:        "/app/rest/projects/{projectLocator}/templates",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateBuildTypeTemplateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateBuildTypeTemplateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createBuildTypeTemplate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateProject create project API
*/
func (a *Client) CreateProject(params *CreateProjectParams, authInfo runtime.ClientAuthInfoWriter) (*CreateProjectOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateProjectParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createProject",
		Method:             "POST",
		PathPattern:        "/app/rest/projects",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateProjectReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateProjectOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createProject: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateSecureToken create secure token API
*/
func (a *Client) CreateSecureToken(params *CreateSecureTokenParams, authInfo runtime.ClientAuthInfoWriter) (*CreateSecureTokenOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateSecureTokenParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createSecureToken",
		Method:             "POST",
		PathPattern:        "/app/rest/projects/{projectLocator}/secure/tokens",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateSecureTokenReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateSecureTokenOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createSecureToken: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  Delete delete API
*/
func (a *Client) Delete(params *DeleteParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "delete",
		Method:             "DELETE",
		PathPattern:        "/app/rest/projects/{projectLocator}/projectFeatures/{featureLocator}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

/*
  DeleteAllParameters delete all parameters API
*/
func (a *Client) DeleteAllParameters(params *DeleteAllParametersParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAllParametersParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteAllParameters",
		Method:             "DELETE",
		PathPattern:        "/app/rest/projects/{projectLocator}/projectFeatures/{featureLocator}/properties",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteAllParametersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

/*
  DeleteProject delete project API
*/
func (a *Client) DeleteProject(params *DeleteProjectParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteProjectParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteProject",
		Method:             "DELETE",
		PathPattern:        "/app/rest/projects/{projectLocator}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteProjectReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

/*
  DeleteProjectAgentPools delete project agent pools API
*/
func (a *Client) DeleteProjectAgentPools(params *DeleteProjectAgentPoolsParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteProjectAgentPoolsParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteProjectAgentPools",
		Method:             "DELETE",
		PathPattern:        "/app/rest/projects/{projectLocator}/agentPools/{agentPoolLocator}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteProjectAgentPoolsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

/*
  Get get API
*/
func (a *Client) Get(params *GetParams, authInfo runtime.ClientAuthInfoWriter) (*GetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get",
		Method:             "GET",
		PathPattern:        "/app/rest/projects/{projectLocator}/projectFeatures",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetBranches get branches API
*/
func (a *Client) GetBranches(params *GetBranchesParams, authInfo runtime.ClientAuthInfoWriter) (*GetBranchesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBranchesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getBranches",
		Method:             "GET",
		PathPattern:        "/app/rest/projects/{projectLocator}/branches",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetBranchesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBranchesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getBranches: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetBuildTypesOrder get build types order API
*/
func (a *Client) GetBuildTypesOrder(params *GetBuildTypesOrderParams, authInfo runtime.ClientAuthInfoWriter) (*GetBuildTypesOrderOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBuildTypesOrderParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getBuildTypesOrder",
		Method:             "GET",
		PathPattern:        "/app/rest/projects/{projectLocator}/order/buildTypes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetBuildTypesOrderReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBuildTypesOrderOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getBuildTypesOrder: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDefaultTemplate get default template API
*/
func (a *Client) GetDefaultTemplate(params *GetDefaultTemplateParams, authInfo runtime.ClientAuthInfoWriter) (*GetDefaultTemplateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDefaultTemplateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDefaultTemplate",
		Method:             "GET",
		PathPattern:        "/app/rest/projects/{projectLocator}/defaultTemplate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDefaultTemplateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDefaultTemplateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDefaultTemplate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetExampleNewProjectDescription get example new project description API
*/
func (a *Client) GetExampleNewProjectDescription(params *GetExampleNewProjectDescriptionParams, authInfo runtime.ClientAuthInfoWriter) (*GetExampleNewProjectDescriptionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetExampleNewProjectDescriptionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getExampleNewProjectDescription",
		Method:             "GET",
		PathPattern:        "/app/rest/projects/{projectLocator}/example/newProjectDescription",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetExampleNewProjectDescriptionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetExampleNewProjectDescriptionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getExampleNewProjectDescription: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetExampleNewProjectDescriptionCompatibilityVersion1 get example new project description compatibility version1 API
*/
func (a *Client) GetExampleNewProjectDescriptionCompatibilityVersion1(params *GetExampleNewProjectDescriptionCompatibilityVersion1Params, authInfo runtime.ClientAuthInfoWriter) (*GetExampleNewProjectDescriptionCompatibilityVersion1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetExampleNewProjectDescriptionCompatibilityVersion1Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getExampleNewProjectDescriptionCompatibilityVersion1",
		Method:             "GET",
		PathPattern:        "/app/rest/projects/{projectLocator}/newProjectDescription",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetExampleNewProjectDescriptionCompatibilityVersion1Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetExampleNewProjectDescriptionCompatibilityVersion1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getExampleNewProjectDescriptionCompatibilityVersion1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetParameter get parameter API
*/
func (a *Client) GetParameter(params *GetParameterParams, authInfo runtime.ClientAuthInfoWriter) (*GetParameterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetParameterParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getParameter",
		Method:             "GET",
		PathPattern:        "/app/rest/projects/{projectLocator}/projectFeatures/{featureLocator}/properties/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetParameterReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetParameterOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getParameter: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetParameterType get parameter type API
*/
func (a *Client) GetParameterType(params *GetParameterTypeParams, authInfo runtime.ClientAuthInfoWriter) (*GetParameterTypeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetParameterTypeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getParameterType",
		Method:             "GET",
		PathPattern:        "/app/rest/projects/{projectLocator}/parameters/{name}/type",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetParameterTypeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetParameterTypeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getParameterType: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetParameterTypeRawValue get parameter type raw value API
*/
func (a *Client) GetParameterTypeRawValue(params *GetParameterTypeRawValueParams, authInfo runtime.ClientAuthInfoWriter) (*GetParameterTypeRawValueOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetParameterTypeRawValueParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getParameterTypeRawValue",
		Method:             "GET",
		PathPattern:        "/app/rest/projects/{projectLocator}/parameters/{name}/type/rawValue",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetParameterTypeRawValueReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetParameterTypeRawValueOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getParameterTypeRawValue: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetParameterValueLong get parameter value long API
*/
func (a *Client) GetParameterValueLong(params *GetParameterValueLongParams, authInfo runtime.ClientAuthInfoWriter) (*GetParameterValueLongOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetParameterValueLongParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getParameterValueLong",
		Method:             "GET",
		PathPattern:        "/app/rest/projects/{projectLocator}/projectFeatures/{featureLocator}/properties/{name}/value",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetParameterValueLongReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetParameterValueLongOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getParameterValueLong: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetParameters get parameters API
*/
func (a *Client) GetParameters(params *GetParametersParams, authInfo runtime.ClientAuthInfoWriter) (*GetParametersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetParametersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getParameters",
		Method:             "GET",
		PathPattern:        "/app/rest/projects/{projectLocator}/projectFeatures/{featureLocator}/properties",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetParametersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetParametersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getParameters: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetParentProject get parent project API
*/
func (a *Client) GetParentProject(params *GetParentProjectParams, authInfo runtime.ClientAuthInfoWriter) (*GetParentProjectOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetParentProjectParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getParentProject",
		Method:             "GET",
		PathPattern:        "/app/rest/projects/{projectLocator}/parentProject",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetParentProjectReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetParentProjectOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getParentProject: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetProjectAgentPools get project agent pools API
*/
func (a *Client) GetProjectAgentPools(params *GetProjectAgentPoolsParams, authInfo runtime.ClientAuthInfoWriter) (*GetProjectAgentPoolsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProjectAgentPoolsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getProjectAgentPools",
		Method:             "GET",
		PathPattern:        "/app/rest/projects/{projectLocator}/agentPools",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetProjectAgentPoolsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetProjectAgentPoolsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getProjectAgentPools: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetProjectsOrder get projects order API
*/
func (a *Client) GetProjectsOrder(params *GetProjectsOrderParams, authInfo runtime.ClientAuthInfoWriter) (*GetProjectsOrderOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProjectsOrderParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getProjectsOrder",
		Method:             "GET",
		PathPattern:        "/app/rest/projects/{projectLocator}/order/projects",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetProjectsOrderReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetProjectsOrderOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getProjectsOrder: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetSecureValue get secure value API
*/
func (a *Client) GetSecureValue(params *GetSecureValueParams, authInfo runtime.ClientAuthInfoWriter) (*GetSecureValueOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSecureValueParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSecureValue",
		Method:             "GET",
		PathPattern:        "/app/rest/projects/{projectLocator}/secure/values/{token}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSecureValueReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSecureValueOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getSecureValue: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetSingle get single API
*/
func (a *Client) GetSingle(params *GetSingleParams, authInfo runtime.ClientAuthInfoWriter) (*GetSingleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSingleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSingle",
		Method:             "GET",
		PathPattern:        "/app/rest/projects/{projectLocator}/projectFeatures/{featureLocator}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSingleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSingleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getSingle: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReloadSettingsFile reload settings file API
*/
func (a *Client) ReloadSettingsFile(params *ReloadSettingsFileParams, authInfo runtime.ClientAuthInfoWriter) (*ReloadSettingsFileOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReloadSettingsFileParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "reloadSettingsFile",
		Method:             "GET",
		PathPattern:        "/app/rest/projects/{projectLocator}/latest",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReloadSettingsFileReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReloadSettingsFileOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for reloadSettingsFile: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RemoveDefaultTemplate remove default template API
*/
func (a *Client) RemoveDefaultTemplate(params *RemoveDefaultTemplateParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRemoveDefaultTemplateParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "removeDefaultTemplate",
		Method:             "DELETE",
		PathPattern:        "/app/rest/projects/{projectLocator}/defaultTemplate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RemoveDefaultTemplateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

/*
  Replace replace API
*/
func (a *Client) Replace(params *ReplaceParams, authInfo runtime.ClientAuthInfoWriter) (*ReplaceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "replace",
		Method:             "PUT",
		PathPattern:        "/app/rest/projects/{projectLocator}/projectFeatures/{featureLocator}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReplaceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReplaceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for replace: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceAll replace all API
*/
func (a *Client) ReplaceAll(params *ReplaceAllParams, authInfo runtime.ClientAuthInfoWriter) (*ReplaceAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceAllParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "replaceAll",
		Method:             "PUT",
		PathPattern:        "/app/rest/projects/{projectLocator}/projectFeatures",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReplaceAllReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReplaceAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for replaceAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ServeBuildFieldWithProject serve build field with project API
*/
func (a *Client) ServeBuildFieldWithProject(params *ServeBuildFieldWithProjectParams, authInfo runtime.ClientAuthInfoWriter) (*ServeBuildFieldWithProjectOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServeBuildFieldWithProjectParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "serveBuildFieldWithProject",
		Method:             "GET",
		PathPattern:        "/app/rest/projects/{projectLocator}/buildTypes/{btLocator}/builds/{buildLocator}/{field}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ServeBuildFieldWithProjectReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ServeBuildFieldWithProjectOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for serveBuildFieldWithProject: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ServeBuildType serve build type API
*/
func (a *Client) ServeBuildType(params *ServeBuildTypeParams, authInfo runtime.ClientAuthInfoWriter) (*ServeBuildTypeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServeBuildTypeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "serveBuildType",
		Method:             "GET",
		PathPattern:        "/app/rest/projects/{projectLocator}/buildTypes/{btLocator}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ServeBuildTypeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ServeBuildTypeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for serveBuildType: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ServeBuildTypeFieldWithProject serve build type field with project API
*/
func (a *Client) ServeBuildTypeFieldWithProject(params *ServeBuildTypeFieldWithProjectParams, authInfo runtime.ClientAuthInfoWriter) (*ServeBuildTypeFieldWithProjectOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServeBuildTypeFieldWithProjectParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "serveBuildTypeFieldWithProject",
		Method:             "GET",
		PathPattern:        "/app/rest/projects/{projectLocator}/buildTypes/{btLocator}/{field}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ServeBuildTypeFieldWithProjectReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ServeBuildTypeFieldWithProjectOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for serveBuildTypeFieldWithProject: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ServeBuildTypeTemplates serve build type templates API
*/
func (a *Client) ServeBuildTypeTemplates(params *ServeBuildTypeTemplatesParams, authInfo runtime.ClientAuthInfoWriter) (*ServeBuildTypeTemplatesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServeBuildTypeTemplatesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "serveBuildTypeTemplates",
		Method:             "GET",
		PathPattern:        "/app/rest/projects/{projectLocator}/templates/{btLocator}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ServeBuildTypeTemplatesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ServeBuildTypeTemplatesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for serveBuildTypeTemplates: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ServeBuildTypesInProject serve build types in project API
*/
func (a *Client) ServeBuildTypesInProject(params *ServeBuildTypesInProjectParams, authInfo runtime.ClientAuthInfoWriter) (*ServeBuildTypesInProjectOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServeBuildTypesInProjectParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "serveBuildTypesInProject",
		Method:             "GET",
		PathPattern:        "/app/rest/projects/{projectLocator}/buildTypes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ServeBuildTypesInProjectReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ServeBuildTypesInProjectOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for serveBuildTypesInProject: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ServeBuildWithProject serve build with project API
*/
func (a *Client) ServeBuildWithProject(params *ServeBuildWithProjectParams, authInfo runtime.ClientAuthInfoWriter) (*ServeBuildWithProjectOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServeBuildWithProjectParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "serveBuildWithProject",
		Method:             "GET",
		PathPattern:        "/app/rest/projects/{projectLocator}/buildTypes/{btLocator}/builds/{buildLocator}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ServeBuildWithProjectReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ServeBuildWithProjectOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for serveBuildWithProject: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ServeBuilds serve builds API
*/
func (a *Client) ServeBuilds(params *ServeBuildsParams, authInfo runtime.ClientAuthInfoWriter) (*ServeBuildsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServeBuildsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "serveBuilds",
		Method:             "GET",
		PathPattern:        "/app/rest/projects/{projectLocator}/buildTypes/{btLocator}/builds",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ServeBuildsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ServeBuildsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for serveBuilds: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ServeProject serve project API
*/
func (a *Client) ServeProject(params *ServeProjectParams, authInfo runtime.ClientAuthInfoWriter) (*ServeProjectOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServeProjectParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "serveProject",
		Method:             "GET",
		PathPattern:        "/app/rest/projects/{projectLocator}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ServeProjectReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ServeProjectOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for serveProject: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ServeProjectField serve project field API
*/
func (a *Client) ServeProjectField(params *ServeProjectFieldParams, authInfo runtime.ClientAuthInfoWriter) (*ServeProjectFieldOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServeProjectFieldParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "serveProjectField",
		Method:             "GET",
		PathPattern:        "/app/rest/projects/{projectLocator}/{field}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ServeProjectFieldReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ServeProjectFieldOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for serveProjectField: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ServeProjects serve projects API
*/
func (a *Client) ServeProjects(params *ServeProjectsParams, authInfo runtime.ClientAuthInfoWriter) (*ServeProjectsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServeProjectsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "serveProjects",
		Method:             "GET",
		PathPattern:        "/app/rest/projects",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ServeProjectsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ServeProjectsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for serveProjects: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ServeTemplatesInProject serve templates in project API
*/
func (a *Client) ServeTemplatesInProject(params *ServeTemplatesInProjectParams, authInfo runtime.ClientAuthInfoWriter) (*ServeTemplatesInProjectOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServeTemplatesInProjectParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "serveTemplatesInProject",
		Method:             "GET",
		PathPattern:        "/app/rest/projects/{projectLocator}/templates",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ServeTemplatesInProjectReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ServeTemplatesInProjectOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for serveTemplatesInProject: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SetBuildTypesOrder set build types order API
*/
func (a *Client) SetBuildTypesOrder(params *SetBuildTypesOrderParams, authInfo runtime.ClientAuthInfoWriter) (*SetBuildTypesOrderOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetBuildTypesOrderParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "setBuildTypesOrder",
		Method:             "PUT",
		PathPattern:        "/app/rest/projects/{projectLocator}/order/buildTypes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SetBuildTypesOrderReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetBuildTypesOrderOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for setBuildTypesOrder: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SetDefaultTemplate set default template API
*/
func (a *Client) SetDefaultTemplate(params *SetDefaultTemplateParams, authInfo runtime.ClientAuthInfoWriter) (*SetDefaultTemplateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetDefaultTemplateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "setDefaultTemplate",
		Method:             "PUT",
		PathPattern:        "/app/rest/projects/{projectLocator}/defaultTemplate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SetDefaultTemplateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetDefaultTemplateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for setDefaultTemplate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SetParameter set parameter API
*/
func (a *Client) SetParameter(params *SetParameterParams, authInfo runtime.ClientAuthInfoWriter) (*SetParameterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetParameterParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "setParameter",
		Method:             "POST",
		PathPattern:        "/app/rest/projects/{projectLocator}/projectFeatures/{featureLocator}/properties",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SetParameterReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetParameterOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for setParameter: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SetParameterType set parameter type API
*/
func (a *Client) SetParameterType(params *SetParameterTypeParams, authInfo runtime.ClientAuthInfoWriter) (*SetParameterTypeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetParameterTypeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "setParameterType",
		Method:             "PUT",
		PathPattern:        "/app/rest/projects/{projectLocator}/parameters/{name}/type",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SetParameterTypeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetParameterTypeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for setParameterType: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SetParameterTypeRawValue set parameter type raw value API
*/
func (a *Client) SetParameterTypeRawValue(params *SetParameterTypeRawValueParams, authInfo runtime.ClientAuthInfoWriter) (*SetParameterTypeRawValueOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetParameterTypeRawValueParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "setParameterTypeRawValue",
		Method:             "PUT",
		PathPattern:        "/app/rest/projects/{projectLocator}/parameters/{name}/type/rawValue",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SetParameterTypeRawValueReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetParameterTypeRawValueOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for setParameterTypeRawValue: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SetParameterValueLong set parameter value long API
*/
func (a *Client) SetParameterValueLong(params *SetParameterValueLongParams, authInfo runtime.ClientAuthInfoWriter) (*SetParameterValueLongOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetParameterValueLongParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "setParameterValueLong",
		Method:             "PUT",
		PathPattern:        "/app/rest/projects/{projectLocator}/projectFeatures/{featureLocator}/properties/{name}/value",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SetParameterValueLongReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetParameterValueLongOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for setParameterValueLong: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SetParameters set parameters API
*/
func (a *Client) SetParameters(params *SetParametersParams, authInfo runtime.ClientAuthInfoWriter) (*SetParametersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetParametersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "setParameters",
		Method:             "PUT",
		PathPattern:        "/app/rest/projects/{projectLocator}/projectFeatures/{featureLocator}/properties",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SetParametersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetParametersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for setParameters: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SetParentProject set parent project API
*/
func (a *Client) SetParentProject(params *SetParentProjectParams, authInfo runtime.ClientAuthInfoWriter) (*SetParentProjectOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetParentProjectParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "setParentProject",
		Method:             "PUT",
		PathPattern:        "/app/rest/projects/{projectLocator}/parentProject",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SetParentProjectReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetParentProjectOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for setParentProject: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SetProjectAgentPools set project agent pools API
*/
func (a *Client) SetProjectAgentPools(params *SetProjectAgentPoolsParams, authInfo runtime.ClientAuthInfoWriter) (*SetProjectAgentPoolsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetProjectAgentPoolsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "setProjectAgentPools",
		Method:             "PUT",
		PathPattern:        "/app/rest/projects/{projectLocator}/agentPools",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SetProjectAgentPoolsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetProjectAgentPoolsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for setProjectAgentPools: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SetProjectField set project field API
*/
func (a *Client) SetProjectField(params *SetProjectFieldParams, authInfo runtime.ClientAuthInfoWriter) (*SetProjectFieldOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetProjectFieldParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "setProjectField",
		Method:             "PUT",
		PathPattern:        "/app/rest/projects/{projectLocator}/{field}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SetProjectFieldReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetProjectFieldOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for setProjectField: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SetProjectsOrder set projects order API
*/
func (a *Client) SetProjectsOrder(params *SetProjectsOrderParams, authInfo runtime.ClientAuthInfoWriter) (*SetProjectsOrderOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetProjectsOrderParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "setProjectsOrder",
		Method:             "PUT",
		PathPattern:        "/app/rest/projects/{projectLocator}/order/projects",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SetProjectsOrderReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetProjectsOrderOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for setProjectsOrder: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
