// Code generated by go-swagger; DO NOT EDIT.

package build_queue

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new build queue API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for build queue API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	PostAppRestBuildQueueQueuedBuildLocator(params *PostAppRestBuildQueueQueuedBuildLocatorParams, authInfo runtime.ClientAuthInfoWriter) (*PostAppRestBuildQueueQueuedBuildLocatorOK, error)

	DeleteBuildsExperimental(params *DeleteBuildsExperimentalParams, authInfo runtime.ClientAuthInfoWriter) error

	GetBuild(params *GetBuildParams, authInfo runtime.ClientAuthInfoWriter) (*GetBuildOK, error)

	GetBuilds(params *GetBuildsParams, authInfo runtime.ClientAuthInfoWriter) (*GetBuildsOK, error)

	QueueNewBuild(params *QueueNewBuildParams, authInfo runtime.ClientAuthInfoWriter) (*QueueNewBuildOK, error)

	ReplaceBuilds(params *ReplaceBuildsParams, authInfo runtime.ClientAuthInfoWriter) (*ReplaceBuildsOK, error)

	ServeCompatibleAgents(params *ServeCompatibleAgentsParams, authInfo runtime.ClientAuthInfoWriter) (*ServeCompatibleAgentsOK, error)

	SetBuildQueueOrder(params *SetBuildQueueOrderParams, authInfo runtime.ClientAuthInfoWriter) (*SetBuildQueueOrderOK, error)

	SetBuildQueuePosition(params *SetBuildQueuePositionParams, authInfo runtime.ClientAuthInfoWriter) (*SetBuildQueuePositionOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  PostAppRestBuildQueueQueuedBuildLocator post app rest build queue queued build locator API
*/
func (a *Client) PostAppRestBuildQueueQueuedBuildLocator(params *PostAppRestBuildQueueQueuedBuildLocatorParams, authInfo runtime.ClientAuthInfoWriter) (*PostAppRestBuildQueueQueuedBuildLocatorOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAppRestBuildQueueQueuedBuildLocatorParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostAppRestBuildQueueQueuedBuildLocator",
		Method:             "POST",
		PathPattern:        "/app/rest/buildQueue/{queuedBuildLocator}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAppRestBuildQueueQueuedBuildLocatorReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostAppRestBuildQueueQueuedBuildLocatorOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostAppRestBuildQueueQueuedBuildLocator: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteBuildsExperimental delete builds experimental API
*/
func (a *Client) DeleteBuildsExperimental(params *DeleteBuildsExperimentalParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteBuildsExperimentalParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteBuildsExperimental",
		Method:             "DELETE",
		PathPattern:        "/app/rest/buildQueue",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteBuildsExperimentalReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

/*
  GetBuild get build API
*/
func (a *Client) GetBuild(params *GetBuildParams, authInfo runtime.ClientAuthInfoWriter) (*GetBuildOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBuildParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getBuild",
		Method:             "GET",
		PathPattern:        "/app/rest/buildQueue/{queuedBuildLocator}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetBuildReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBuildOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getBuild: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetBuilds get builds API
*/
func (a *Client) GetBuilds(params *GetBuildsParams, authInfo runtime.ClientAuthInfoWriter) (*GetBuildsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBuildsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getBuilds",
		Method:             "GET",
		PathPattern:        "/app/rest/buildQueue",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetBuildsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBuildsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getBuilds: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  QueueNewBuild queue new build API
*/
func (a *Client) QueueNewBuild(params *QueueNewBuildParams, authInfo runtime.ClientAuthInfoWriter) (*QueueNewBuildOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewQueueNewBuildParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "queueNewBuild",
		Method:             "POST",
		PathPattern:        "/app/rest/buildQueue",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &QueueNewBuildReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*QueueNewBuildOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for queueNewBuild: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceBuilds replace builds API
*/
func (a *Client) ReplaceBuilds(params *ReplaceBuildsParams, authInfo runtime.ClientAuthInfoWriter) (*ReplaceBuildsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceBuildsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "replaceBuilds",
		Method:             "PUT",
		PathPattern:        "/app/rest/buildQueue",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReplaceBuildsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReplaceBuildsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for replaceBuilds: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ServeCompatibleAgents serve compatible agents API
*/
func (a *Client) ServeCompatibleAgents(params *ServeCompatibleAgentsParams, authInfo runtime.ClientAuthInfoWriter) (*ServeCompatibleAgentsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServeCompatibleAgentsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "serveCompatibleAgents",
		Method:             "GET",
		PathPattern:        "/app/rest/buildQueue/{queuedBuildLocator}/compatibleAgents",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ServeCompatibleAgentsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ServeCompatibleAgentsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for serveCompatibleAgents: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SetBuildQueueOrder set build queue order API
*/
func (a *Client) SetBuildQueueOrder(params *SetBuildQueueOrderParams, authInfo runtime.ClientAuthInfoWriter) (*SetBuildQueueOrderOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetBuildQueueOrderParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "setBuildQueueOrder",
		Method:             "PUT",
		PathPattern:        "/app/rest/buildQueue/order",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SetBuildQueueOrderReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetBuildQueueOrderOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for setBuildQueueOrder: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SetBuildQueuePosition set build queue position API
*/
func (a *Client) SetBuildQueuePosition(params *SetBuildQueuePositionParams, authInfo runtime.ClientAuthInfoWriter) (*SetBuildQueuePositionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetBuildQueuePositionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "setBuildQueuePosition",
		Method:             "PUT",
		PathPattern:        "/app/rest/buildQueue/order/{queuePosition}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SetBuildQueuePositionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetBuildQueuePositionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for setBuildQueuePosition: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
