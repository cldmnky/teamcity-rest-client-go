// Code generated by go-swagger; DO NOT EDIT.

package cloud_instance

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewServeImageParams creates a new ServeImageParams object
// with the default values initialized.
func NewServeImageParams() *ServeImageParams {
	var ()
	return &ServeImageParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewServeImageParamsWithTimeout creates a new ServeImageParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewServeImageParamsWithTimeout(timeout time.Duration) *ServeImageParams {
	var ()
	return &ServeImageParams{

		timeout: timeout,
	}
}

// NewServeImageParamsWithContext creates a new ServeImageParams object
// with the default values initialized, and the ability to set a context for a request
func NewServeImageParamsWithContext(ctx context.Context) *ServeImageParams {
	var ()
	return &ServeImageParams{

		Context: ctx,
	}
}

// NewServeImageParamsWithHTTPClient creates a new ServeImageParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewServeImageParamsWithHTTPClient(client *http.Client) *ServeImageParams {
	var ()
	return &ServeImageParams{
		HTTPClient: client,
	}
}

/*ServeImageParams contains all the parameters to send to the API endpoint
for the serve image operation typically these are written to a http.Request
*/
type ServeImageParams struct {

	/*Fields*/
	Fields *string
	/*ImageLocator*/
	ImageLocator string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the serve image params
func (o *ServeImageParams) WithTimeout(timeout time.Duration) *ServeImageParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the serve image params
func (o *ServeImageParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the serve image params
func (o *ServeImageParams) WithContext(ctx context.Context) *ServeImageParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the serve image params
func (o *ServeImageParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the serve image params
func (o *ServeImageParams) WithHTTPClient(client *http.Client) *ServeImageParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the serve image params
func (o *ServeImageParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFields adds the fields to the serve image params
func (o *ServeImageParams) WithFields(fields *string) *ServeImageParams {
	o.SetFields(fields)
	return o
}

// SetFields adds the fields to the serve image params
func (o *ServeImageParams) SetFields(fields *string) {
	o.Fields = fields
}

// WithImageLocator adds the imageLocator to the serve image params
func (o *ServeImageParams) WithImageLocator(imageLocator string) *ServeImageParams {
	o.SetImageLocator(imageLocator)
	return o
}

// SetImageLocator adds the imageLocator to the serve image params
func (o *ServeImageParams) SetImageLocator(imageLocator string) {
	o.ImageLocator = imageLocator
}

// WriteToRequest writes these params to a swagger request
func (o *ServeImageParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Fields != nil {

		// query param fields
		var qrFields string
		if o.Fields != nil {
			qrFields = *o.Fields
		}
		qFields := qrFields
		if qFields != "" {
			if err := r.SetQueryParam("fields", qFields); err != nil {
				return err
			}
		}

	}

	// path param imageLocator
	if err := r.SetPathParam("imageLocator", o.ImageLocator); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
