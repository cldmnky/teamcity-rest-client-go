// Code generated by go-swagger; DO NOT EDIT.

package debug

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new debug API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for debug API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteCurrentRememberMe(params *DeleteCurrentRememberMeParams, authInfo runtime.ClientAuthInfoWriter) error

	EmptyTask(params *EmptyTaskParams, authInfo runtime.ClientAuthInfoWriter) (*EmptyTaskOK, error)

	ExecuteDBQuery(params *ExecuteDBQueryParams, authInfo runtime.ClientAuthInfoWriter) (*ExecuteDBQueryOK, error)

	GetBuildChainOptimizationLog(params *GetBuildChainOptimizationLogParams, authInfo runtime.ClientAuthInfoWriter) (*GetBuildChainOptimizationLogOK, error)

	GetCachedBuildPromotions(params *GetCachedBuildPromotionsParams, authInfo runtime.ClientAuthInfoWriter) (*GetCachedBuildPromotionsOK, error)

	GetCachedBuildPromotionsStats(params *GetCachedBuildPromotionsStatsParams, authInfo runtime.ClientAuthInfoWriter) (*GetCachedBuildPromotionsStatsOK, error)

	GetCachedBuildsStat(params *GetCachedBuildsStatParams, authInfo runtime.ClientAuthInfoWriter) (*GetCachedBuildsStatOK, error)

	GetCurrentSession(params *GetCurrentSessionParams, authInfo runtime.ClientAuthInfoWriter) (*GetCurrentSessionOK, error)

	GetCurrentSessionMaxInactiveInterval(params *GetCurrentSessionMaxInactiveIntervalParams, authInfo runtime.ClientAuthInfoWriter) (*GetCurrentSessionMaxInactiveIntervalOK, error)

	GetCurrentUserPermissions(params *GetCurrentUserPermissionsParams, authInfo runtime.ClientAuthInfoWriter) (*GetCurrentUserPermissionsOK, error)

	GetDate(params *GetDateParams, authInfo runtime.ClientAuthInfoWriter) (*GetDateOK, error)

	GetDiagnosticsPerfStats(params *GetDiagnosticsPerfStatsParams, authInfo runtime.ClientAuthInfoWriter) (*GetDiagnosticsPerfStatsOK, error)

	GetEnvironmentVariables(params *GetEnvironmentVariablesParams, authInfo runtime.ClientAuthInfoWriter) (*GetEnvironmentVariablesOK, error)

	GetHashed(params *GetHashedParams, authInfo runtime.ClientAuthInfoWriter) (*GetHashedOK, error)

	GetIPAddress(params *GetIPAddressParams, authInfo runtime.ClientAuthInfoWriter) (*GetIPAddressOK, error)

	GetRawInvestigations(params *GetRawInvestigationsParams, authInfo runtime.ClientAuthInfoWriter) (*GetRawInvestigationsOK, error)

	GetRequestDetails(params *GetRequestDetailsParams, authInfo runtime.ClientAuthInfoWriter) (*GetRequestDetailsOK, error)

	GetScrambled(params *GetScrambledParams, authInfo runtime.ClientAuthInfoWriter) (*GetScrambledOK, error)

	GetSessions(params *GetSessionsParams, authInfo runtime.ClientAuthInfoWriter) (*GetSessionsOK, error)

	GetSystemProperties(params *GetSystemPropertiesParams, authInfo runtime.ClientAuthInfoWriter) (*GetSystemPropertiesOK, error)

	GetThreadDump(params *GetThreadDumpParams, authInfo runtime.ClientAuthInfoWriter) (*GetThreadDumpOK, error)

	GetThreadInterrupted(params *GetThreadInterruptedParams, authInfo runtime.ClientAuthInfoWriter) (*GetThreadInterruptedOK, error)

	GetUnscrambled(params *GetUnscrambledParams, authInfo runtime.ClientAuthInfoWriter) (*GetUnscrambledOK, error)

	InterruptThread(params *InterruptThreadParams, authInfo runtime.ClientAuthInfoWriter) (*InterruptThreadOK, error)

	InvalidateCurrentSession(params *InvalidateCurrentSessionParams, authInfo runtime.ClientAuthInfoWriter) error

	ListDBTables(params *ListDBTablesParams, authInfo runtime.ClientAuthInfoWriter) (*ListDBTablesOK, error)

	NewRememberMe(params *NewRememberMeParams, authInfo runtime.ClientAuthInfoWriter) (*NewRememberMeOK, error)

	PostRequestDetails(params *PostRequestDetailsParams, authInfo runtime.ClientAuthInfoWriter) (*PostRequestDetailsOK, error)

	PutRequestDetails(params *PutRequestDetailsParams, authInfo runtime.ClientAuthInfoWriter) (*PutRequestDetailsOK, error)

	RequestFinalization(params *RequestFinalizationParams, authInfo runtime.ClientAuthInfoWriter) error

	RequestGc(params *RequestGcParams, authInfo runtime.ClientAuthInfoWriter) error

	SaveMemoryDump(params *SaveMemoryDumpParams, authInfo runtime.ClientAuthInfoWriter) (*SaveMemoryDumpOK, error)

	SetCurrentSessionMaxInactiveInterval(params *SetCurrentSessionMaxInactiveIntervalParams, authInfo runtime.ClientAuthInfoWriter) (*SetCurrentSessionMaxInactiveIntervalOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  DeleteCurrentRememberMe delete current remember me API
*/
func (a *Client) DeleteCurrentRememberMe(params *DeleteCurrentRememberMeParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCurrentRememberMeParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteCurrentRememberMe",
		Method:             "DELETE",
		PathPattern:        "/app/rest/debug/currentRequest/rememberMe",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteCurrentRememberMeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

/*
  EmptyTask empty task API
*/
func (a *Client) EmptyTask(params *EmptyTaskParams, authInfo runtime.ClientAuthInfoWriter) (*EmptyTaskOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEmptyTaskParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "emptyTask",
		Method:             "POST",
		PathPattern:        "/app/rest/debug/emptyTask",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EmptyTaskReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EmptyTaskOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for emptyTask: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ExecuteDBQuery execute d b query API
*/
func (a *Client) ExecuteDBQuery(params *ExecuteDBQueryParams, authInfo runtime.ClientAuthInfoWriter) (*ExecuteDBQueryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewExecuteDBQueryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "executeDBQuery",
		Method:             "GET",
		PathPattern:        "/app/rest/debug/database/query/{query}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ExecuteDBQueryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ExecuteDBQueryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for executeDBQuery: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetBuildChainOptimizationLog get build chain optimization log API
*/
func (a *Client) GetBuildChainOptimizationLog(params *GetBuildChainOptimizationLogParams, authInfo runtime.ClientAuthInfoWriter) (*GetBuildChainOptimizationLogOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBuildChainOptimizationLogParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getBuildChainOptimizationLog",
		Method:             "GET",
		PathPattern:        "/app/rest/debug/buildChainOptimizationLog/{buildLocator}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetBuildChainOptimizationLogReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBuildChainOptimizationLogOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getBuildChainOptimizationLog: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetCachedBuildPromotions get cached build promotions API
*/
func (a *Client) GetCachedBuildPromotions(params *GetCachedBuildPromotionsParams, authInfo runtime.ClientAuthInfoWriter) (*GetCachedBuildPromotionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCachedBuildPromotionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getCachedBuildPromotions",
		Method:             "GET",
		PathPattern:        "/app/rest/debug/caches/buildPromotions/content",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCachedBuildPromotionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCachedBuildPromotionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getCachedBuildPromotions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetCachedBuildPromotionsStats get cached build promotions stats API
*/
func (a *Client) GetCachedBuildPromotionsStats(params *GetCachedBuildPromotionsStatsParams, authInfo runtime.ClientAuthInfoWriter) (*GetCachedBuildPromotionsStatsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCachedBuildPromotionsStatsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getCachedBuildPromotionsStats",
		Method:             "GET",
		PathPattern:        "/app/rest/debug/caches/buildPromotions/stats",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCachedBuildPromotionsStatsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCachedBuildPromotionsStatsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getCachedBuildPromotionsStats: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetCachedBuildsStat get cached builds stat API
*/
func (a *Client) GetCachedBuildsStat(params *GetCachedBuildsStatParams, authInfo runtime.ClientAuthInfoWriter) (*GetCachedBuildsStatOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCachedBuildsStatParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getCachedBuildsStat",
		Method:             "GET",
		PathPattern:        "/app/rest/debug/caches/builds/stats",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCachedBuildsStatReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCachedBuildsStatOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getCachedBuildsStat: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetCurrentSession get current session API
*/
func (a *Client) GetCurrentSession(params *GetCurrentSessionParams, authInfo runtime.ClientAuthInfoWriter) (*GetCurrentSessionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCurrentSessionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getCurrentSession",
		Method:             "GET",
		PathPattern:        "/app/rest/debug/currentRequest/session",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCurrentSessionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCurrentSessionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getCurrentSession: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetCurrentSessionMaxInactiveInterval get current session max inactive interval API
*/
func (a *Client) GetCurrentSessionMaxInactiveInterval(params *GetCurrentSessionMaxInactiveIntervalParams, authInfo runtime.ClientAuthInfoWriter) (*GetCurrentSessionMaxInactiveIntervalOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCurrentSessionMaxInactiveIntervalParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getCurrentSessionMaxInactiveInterval",
		Method:             "GET",
		PathPattern:        "/app/rest/debug/currentRequest/session/maxInactiveSeconds",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCurrentSessionMaxInactiveIntervalReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCurrentSessionMaxInactiveIntervalOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getCurrentSessionMaxInactiveInterval: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetCurrentUserPermissions get current user permissions API
*/
func (a *Client) GetCurrentUserPermissions(params *GetCurrentUserPermissionsParams, authInfo runtime.ClientAuthInfoWriter) (*GetCurrentUserPermissionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCurrentUserPermissionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getCurrentUserPermissions",
		Method:             "GET",
		PathPattern:        "/app/rest/debug/currentUserPermissions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCurrentUserPermissionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCurrentUserPermissionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getCurrentUserPermissions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDate get date API
*/
func (a *Client) GetDate(params *GetDateParams, authInfo runtime.ClientAuthInfoWriter) (*GetDateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDate",
		Method:             "GET",
		PathPattern:        "/app/rest/debug/date/{dateLocator}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDiagnosticsPerfStats get diagnostics perf stats API
*/
func (a *Client) GetDiagnosticsPerfStats(params *GetDiagnosticsPerfStatsParams, authInfo runtime.ClientAuthInfoWriter) (*GetDiagnosticsPerfStatsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDiagnosticsPerfStatsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDiagnosticsPerfStats",
		Method:             "GET",
		PathPattern:        "/app/rest/debug/diagnostics/threadPerfStat/stats",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDiagnosticsPerfStatsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDiagnosticsPerfStatsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDiagnosticsPerfStats: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetEnvironmentVariables get environment variables API
*/
func (a *Client) GetEnvironmentVariables(params *GetEnvironmentVariablesParams, authInfo runtime.ClientAuthInfoWriter) (*GetEnvironmentVariablesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEnvironmentVariablesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getEnvironmentVariables",
		Method:             "GET",
		PathPattern:        "/app/rest/debug/jvm/environmentVariables",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetEnvironmentVariablesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetEnvironmentVariablesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getEnvironmentVariables: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetHashed get hashed API
*/
func (a *Client) GetHashed(params *GetHashedParams, authInfo runtime.ClientAuthInfoWriter) (*GetHashedOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetHashedParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getHashed",
		Method:             "GET",
		PathPattern:        "/app/rest/debug/values/transform/{method}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetHashedReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetHashedOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getHashed: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetIPAddress get Ip address API
*/
func (a *Client) GetIPAddress(params *GetIPAddressParams, authInfo runtime.ClientAuthInfoWriter) (*GetIPAddressOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIPAddressParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getIpAddress",
		Method:             "GET",
		PathPattern:        "/app/rest/debug/dns/lookup/{host}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIPAddressReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetIPAddressOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getIpAddress: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetRawInvestigations get raw investigations API
*/
func (a *Client) GetRawInvestigations(params *GetRawInvestigationsParams, authInfo runtime.ClientAuthInfoWriter) (*GetRawInvestigationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRawInvestigationsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getRawInvestigations",
		Method:             "GET",
		PathPattern:        "/app/rest/debug/investigations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRawInvestigationsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRawInvestigationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getRawInvestigations: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetRequestDetails get request details API
*/
func (a *Client) GetRequestDetails(params *GetRequestDetailsParams, authInfo runtime.ClientAuthInfoWriter) (*GetRequestDetailsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRequestDetailsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getRequestDetails",
		Method:             "GET",
		PathPattern:        "/app/rest/debug/currentRequest/details{extra}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRequestDetailsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRequestDetailsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getRequestDetails: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetScrambled get scrambled API
*/
func (a *Client) GetScrambled(params *GetScrambledParams, authInfo runtime.ClientAuthInfoWriter) (*GetScrambledOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetScrambledParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getScrambled",
		Method:             "GET",
		PathPattern:        "/app/rest/debug/values/password/scrambled",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetScrambledReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetScrambledOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getScrambled: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetSessions get sessions API
*/
func (a *Client) GetSessions(params *GetSessionsParams, authInfo runtime.ClientAuthInfoWriter) (*GetSessionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSessionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSessions",
		Method:             "GET",
		PathPattern:        "/app/rest/debug/sessions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSessionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSessionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getSessions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetSystemProperties get system properties API
*/
func (a *Client) GetSystemProperties(params *GetSystemPropertiesParams, authInfo runtime.ClientAuthInfoWriter) (*GetSystemPropertiesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSystemPropertiesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSystemProperties",
		Method:             "GET",
		PathPattern:        "/app/rest/debug/jvm/systemProperties",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSystemPropertiesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSystemPropertiesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getSystemProperties: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetThreadDump get thread dump API
*/
func (a *Client) GetThreadDump(params *GetThreadDumpParams, authInfo runtime.ClientAuthInfoWriter) (*GetThreadDumpOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetThreadDumpParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getThreadDump",
		Method:             "GET",
		PathPattern:        "/app/rest/debug/threadDump",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetThreadDumpReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetThreadDumpOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getThreadDump: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetThreadInterrupted get thread interrupted API
*/
func (a *Client) GetThreadInterrupted(params *GetThreadInterruptedParams, authInfo runtime.ClientAuthInfoWriter) (*GetThreadInterruptedOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetThreadInterruptedParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getThreadInterrupted",
		Method:             "GET",
		PathPattern:        "/app/rest/debug/threads/{threadLocator}/interrupted",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetThreadInterruptedReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetThreadInterruptedOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getThreadInterrupted: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetUnscrambled get unscrambled API
*/
func (a *Client) GetUnscrambled(params *GetUnscrambledParams, authInfo runtime.ClientAuthInfoWriter) (*GetUnscrambledOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUnscrambledParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getUnscrambled",
		Method:             "GET",
		PathPattern:        "/app/rest/debug/values/password/unscrambled",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUnscrambledReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUnscrambledOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getUnscrambled: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  InterruptThread interrupt thread API
*/
func (a *Client) InterruptThread(params *InterruptThreadParams, authInfo runtime.ClientAuthInfoWriter) (*InterruptThreadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInterruptThreadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "interruptThread",
		Method:             "PUT",
		PathPattern:        "/app/rest/debug/threads/{threadLocator}/interrupted",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &InterruptThreadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*InterruptThreadOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for interruptThread: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  InvalidateCurrentSession invalidate current session API
*/
func (a *Client) InvalidateCurrentSession(params *InvalidateCurrentSessionParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInvalidateCurrentSessionParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "invalidateCurrentSession",
		Method:             "DELETE",
		PathPattern:        "/app/rest/debug/currentRequest/session",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &InvalidateCurrentSessionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

/*
  ListDBTables list d b tables API
*/
func (a *Client) ListDBTables(params *ListDBTablesParams, authInfo runtime.ClientAuthInfoWriter) (*ListDBTablesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListDBTablesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listDBTables",
		Method:             "GET",
		PathPattern:        "/app/rest/debug/database/tables",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListDBTablesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListDBTablesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listDBTables: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  NewRememberMe new remember me API
*/
func (a *Client) NewRememberMe(params *NewRememberMeParams, authInfo runtime.ClientAuthInfoWriter) (*NewRememberMeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNewRememberMeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "newRememberMe",
		Method:             "POST",
		PathPattern:        "/app/rest/debug/currentRequest/rememberMe",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &NewRememberMeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*NewRememberMeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for newRememberMe: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostRequestDetails post request details API
*/
func (a *Client) PostRequestDetails(params *PostRequestDetailsParams, authInfo runtime.ClientAuthInfoWriter) (*PostRequestDetailsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRequestDetailsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postRequestDetails",
		Method:             "POST",
		PathPattern:        "/app/rest/debug/currentRequest/details{extra}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostRequestDetailsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostRequestDetailsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postRequestDetails: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutRequestDetails put request details API
*/
func (a *Client) PutRequestDetails(params *PutRequestDetailsParams, authInfo runtime.ClientAuthInfoWriter) (*PutRequestDetailsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutRequestDetailsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putRequestDetails",
		Method:             "PUT",
		PathPattern:        "/app/rest/debug/currentRequest/details{extra}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutRequestDetailsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutRequestDetailsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for putRequestDetails: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RequestFinalization request finalization API
*/
func (a *Client) RequestFinalization(params *RequestFinalizationParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRequestFinalizationParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "requestFinalization",
		Method:             "POST",
		PathPattern:        "/app/rest/debug/jvm/finalization",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RequestFinalizationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

/*
  RequestGc request gc API
*/
func (a *Client) RequestGc(params *RequestGcParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRequestGcParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "requestGc",
		Method:             "POST",
		PathPattern:        "/app/rest/debug/jvm/gc",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RequestGcReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

/*
  SaveMemoryDump save memory dump API
*/
func (a *Client) SaveMemoryDump(params *SaveMemoryDumpParams, authInfo runtime.ClientAuthInfoWriter) (*SaveMemoryDumpOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSaveMemoryDumpParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "saveMemoryDump",
		Method:             "POST",
		PathPattern:        "/app/rest/debug/memory/dumps",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SaveMemoryDumpReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SaveMemoryDumpOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for saveMemoryDump: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SetCurrentSessionMaxInactiveInterval set current session max inactive interval API
*/
func (a *Client) SetCurrentSessionMaxInactiveInterval(params *SetCurrentSessionMaxInactiveIntervalParams, authInfo runtime.ClientAuthInfoWriter) (*SetCurrentSessionMaxInactiveIntervalOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetCurrentSessionMaxInactiveIntervalParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "setCurrentSessionMaxInactiveInterval",
		Method:             "PUT",
		PathPattern:        "/app/rest/debug/currentRequest/session/maxInactiveSeconds",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SetCurrentSessionMaxInactiveIntervalReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetCurrentSessionMaxInactiveIntervalOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for setCurrentSessionMaxInactiveInterval: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
