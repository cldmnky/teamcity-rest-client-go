// Code generated by go-swagger; DO NOT EDIT.

package build

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new build API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for build API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	PostAppRestBuildsBuildLocator(params *PostAppRestBuildsBuildLocatorParams, authInfo runtime.ClientAuthInfoWriter) (*PostAppRestBuildsBuildLocatorOK, error)

	PutAppRestBuildsBuildLocatorAttributesName(params *PutAppRestBuildsBuildLocatorAttributesNameParams, authInfo runtime.ClientAuthInfoWriter) (*PutAppRestBuildsBuildLocatorAttributesNameOK, error)

	AddLogMessage(params *AddLogMessageParams, authInfo runtime.ClientAuthInfoWriter) error

	AddProblem(params *AddProblemParams, authInfo runtime.ClientAuthInfoWriter) (*AddProblemOK, error)

	AddTags(params *AddTagsParams, authInfo runtime.ClientAuthInfoWriter) (*AddTagsOK, error)

	AddTagsMultiple(params *AddTagsMultipleParams, authInfo runtime.ClientAuthInfoWriter) (*AddTagsMultipleOK, error)

	CancelBuild(params *CancelBuildParams, authInfo runtime.ClientAuthInfoWriter) (*CancelBuildOK, error)

	CancelMultiple(params *CancelMultipleParams, authInfo runtime.ClientAuthInfoWriter) (*CancelMultipleOK, error)

	DeleteBuild(params *DeleteBuildParams, authInfo runtime.ClientAuthInfoWriter) error

	DeleteBuilds(params *DeleteBuildsParams, authInfo runtime.ClientAuthInfoWriter) error

	DeleteComment(params *DeleteCommentParams, authInfo runtime.ClientAuthInfoWriter) error

	DeleteCommentMultiple(params *DeleteCommentMultipleParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteCommentMultipleOK, error)

	DeleteMultiple(params *DeleteMultipleParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteMultipleOK, error)

	GetArtifactDependencyChanges(params *GetArtifactDependencyChangesParams, authInfo runtime.ClientAuthInfoWriter) (*GetArtifactDependencyChangesOK, error)

	GetArtifactsDirectory(params *GetArtifactsDirectoryParams, authInfo runtime.ClientAuthInfoWriter) (*GetArtifactsDirectoryOK, error)

	GetBuildFinishDate(params *GetBuildFinishDateParams, authInfo runtime.ClientAuthInfoWriter) (*GetBuildFinishDateOK, error)

	GetBuildNumber(params *GetBuildNumberParams, authInfo runtime.ClientAuthInfoWriter) (*GetBuildNumberOK, error)

	GetBuildStatusText(params *GetBuildStatusTextParams, authInfo runtime.ClientAuthInfoWriter) (*GetBuildStatusTextOK, error)

	GetCanceledInfo(params *GetCanceledInfoParams, authInfo runtime.ClientAuthInfoWriter) (*GetCanceledInfoOK, error)

	GetMultiple(params *GetMultipleParams, authInfo runtime.ClientAuthInfoWriter) (*GetMultipleOK, error)

	GetPinData(params *GetPinDataParams, authInfo runtime.ClientAuthInfoWriter) (*GetPinDataOK, error)

	GetPinned(params *GetPinnedParams, authInfo runtime.ClientAuthInfoWriter) (*GetPinnedOK, error)

	GetResolvedParameter(params *GetResolvedParameterParams, authInfo runtime.ClientAuthInfoWriter) (*GetResolvedParameterOK, error)

	MarkBuildAsRunning(params *MarkBuildAsRunningParams, authInfo runtime.ClientAuthInfoWriter) (*MarkBuildAsRunningOK, error)

	PinBuild(params *PinBuildParams, authInfo runtime.ClientAuthInfoWriter) error

	PinMultiple(params *PinMultipleParams, authInfo runtime.ClientAuthInfoWriter) (*PinMultipleOK, error)

	RemoveTagsMultiple(params *RemoveTagsMultipleParams, authInfo runtime.ClientAuthInfoWriter) (*RemoveTagsMultipleOK, error)

	ReplaceComment(params *ReplaceCommentParams, authInfo runtime.ClientAuthInfoWriter) error

	ReplaceCommentMultiple(params *ReplaceCommentMultipleParams, authInfo runtime.ClientAuthInfoWriter) (*ReplaceCommentMultipleOK, error)

	ReplaceTags(params *ReplaceTagsParams, authInfo runtime.ClientAuthInfoWriter) (*ReplaceTagsOK, error)

	ResetBuildFinishParameters(params *ResetBuildFinishParametersParams, authInfo runtime.ClientAuthInfoWriter) error

	ServeAggregatedBuildStatus(params *ServeAggregatedBuildStatusParams, authInfo runtime.ClientAuthInfoWriter) (*ServeAggregatedBuildStatusOK, error)

	ServeAggregatedBuildStatusIcon(params *ServeAggregatedBuildStatusIconParams, authInfo runtime.ClientAuthInfoWriter) error

	ServeAllBuilds(params *ServeAllBuildsParams, authInfo runtime.ClientAuthInfoWriter) (*ServeAllBuildsOK, error)

	ServeBuild(params *ServeBuildParams, authInfo runtime.ClientAuthInfoWriter) (*ServeBuildOK, error)

	ServeBuildActualParameters(params *ServeBuildActualParametersParams, authInfo runtime.ClientAuthInfoWriter) (*ServeBuildActualParametersOK, error)

	ServeBuildFieldByBuildOnly(params *ServeBuildFieldByBuildOnlyParams, authInfo runtime.ClientAuthInfoWriter) (*ServeBuildFieldByBuildOnlyOK, error)

	ServeBuildRelatedIssues(params *ServeBuildRelatedIssuesParams, authInfo runtime.ClientAuthInfoWriter) (*ServeBuildRelatedIssuesOK, error)

	ServeBuildRelatedIssuesOld(params *ServeBuildRelatedIssuesOldParams, authInfo runtime.ClientAuthInfoWriter) (*ServeBuildRelatedIssuesOldOK, error)

	ServeBuildStatisticValue(params *ServeBuildStatisticValueParams, authInfo runtime.ClientAuthInfoWriter) (*ServeBuildStatisticValueOK, error)

	ServeBuildStatisticValues(params *ServeBuildStatisticValuesParams, authInfo runtime.ClientAuthInfoWriter) (*ServeBuildStatisticValuesOK, error)

	ServeBuildStatusIcon(params *ServeBuildStatusIconParams, authInfo runtime.ClientAuthInfoWriter) error

	ServeSourceFile(params *ServeSourceFileParams, authInfo runtime.ClientAuthInfoWriter) error

	ServeTags(params *ServeTagsParams, authInfo runtime.ClientAuthInfoWriter) (*ServeTagsOK, error)

	SetBuildNumber(params *SetBuildNumberParams, authInfo runtime.ClientAuthInfoWriter) (*SetBuildNumberOK, error)

	SetBuildPinData(params *SetBuildPinDataParams, authInfo runtime.ClientAuthInfoWriter) (*SetBuildPinDataOK, error)

	SetBuildStatusText(params *SetBuildStatusTextParams, authInfo runtime.ClientAuthInfoWriter) (*SetBuildStatusTextOK, error)

	SetFinishedTime(params *SetFinishedTimeParams, authInfo runtime.ClientAuthInfoWriter) (*SetFinishedTimeOK, error)

	UnpinBuild(params *UnpinBuildParams, authInfo runtime.ClientAuthInfoWriter) error

	SetTransport(transport runtime.ClientTransport)
}

/*
  PostAppRestBuildsBuildLocator post app rest builds build locator API
*/
func (a *Client) PostAppRestBuildsBuildLocator(params *PostAppRestBuildsBuildLocatorParams, authInfo runtime.ClientAuthInfoWriter) (*PostAppRestBuildsBuildLocatorOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAppRestBuildsBuildLocatorParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostAppRestBuildsBuildLocator",
		Method:             "POST",
		PathPattern:        "/app/rest/builds/{buildLocator}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAppRestBuildsBuildLocatorReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostAppRestBuildsBuildLocatorOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostAppRestBuildsBuildLocator: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutAppRestBuildsBuildLocatorAttributesName put app rest builds build locator attributes name API
*/
func (a *Client) PutAppRestBuildsBuildLocatorAttributesName(params *PutAppRestBuildsBuildLocatorAttributesNameParams, authInfo runtime.ClientAuthInfoWriter) (*PutAppRestBuildsBuildLocatorAttributesNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutAppRestBuildsBuildLocatorAttributesNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutAppRestBuildsBuildLocatorAttributesName",
		Method:             "PUT",
		PathPattern:        "/app/rest/builds/{buildLocator}/attributes/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutAppRestBuildsBuildLocatorAttributesNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutAppRestBuildsBuildLocatorAttributesNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutAppRestBuildsBuildLocatorAttributesName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  AddLogMessage adds a message to the build log service messages are accepted
*/
func (a *Client) AddLogMessage(params *AddLogMessageParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddLogMessageParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addLogMessage",
		Method:             "POST",
		PathPattern:        "/app/rest/builds/{buildLocator}/log",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddLogMessageReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

/*
  AddProblem add problem API
*/
func (a *Client) AddProblem(params *AddProblemParams, authInfo runtime.ClientAuthInfoWriter) (*AddProblemOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddProblemParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addProblem",
		Method:             "POST",
		PathPattern:        "/app/rest/builds/{buildLocator}/problemOccurrences",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddProblemReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddProblemOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for addProblem: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  AddTags add tags API
*/
func (a *Client) AddTags(params *AddTagsParams, authInfo runtime.ClientAuthInfoWriter) (*AddTagsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddTagsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addTags",
		Method:             "POST",
		PathPattern:        "/app/rest/builds/{buildLocator}/tags",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddTagsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddTagsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for addTags: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  AddTagsMultiple add tags multiple API
*/
func (a *Client) AddTagsMultiple(params *AddTagsMultipleParams, authInfo runtime.ClientAuthInfoWriter) (*AddTagsMultipleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddTagsMultipleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addTagsMultiple",
		Method:             "POST",
		PathPattern:        "/app/rest/builds/multiple/{buildLocator}/tags",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddTagsMultipleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddTagsMultipleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for addTagsMultiple: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CancelBuild cancel build API
*/
func (a *Client) CancelBuild(params *CancelBuildParams, authInfo runtime.ClientAuthInfoWriter) (*CancelBuildOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCancelBuildParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "cancelBuild",
		Method:             "GET",
		PathPattern:        "/app/rest/builds/{buildLocator}/example/buildCancelRequest",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CancelBuildReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CancelBuildOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for cancelBuild: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CancelMultiple cancel multiple API
*/
func (a *Client) CancelMultiple(params *CancelMultipleParams, authInfo runtime.ClientAuthInfoWriter) (*CancelMultipleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCancelMultipleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "cancelMultiple",
		Method:             "POST",
		PathPattern:        "/app/rest/builds/multiple/{buildLocator}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CancelMultipleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CancelMultipleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for cancelMultiple: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteBuild delete build API
*/
func (a *Client) DeleteBuild(params *DeleteBuildParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteBuildParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteBuild",
		Method:             "DELETE",
		PathPattern:        "/app/rest/builds/{buildLocator}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteBuildReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

/*
  DeleteBuilds delete builds API
*/
func (a *Client) DeleteBuilds(params *DeleteBuildsParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteBuildsParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteBuilds",
		Method:             "DELETE",
		PathPattern:        "/app/rest/builds",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteBuildsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

/*
  DeleteComment delete comment API
*/
func (a *Client) DeleteComment(params *DeleteCommentParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCommentParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteComment",
		Method:             "DELETE",
		PathPattern:        "/app/rest/builds/{buildLocator}/comment",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteCommentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

/*
  DeleteCommentMultiple delete comment multiple API
*/
func (a *Client) DeleteCommentMultiple(params *DeleteCommentMultipleParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteCommentMultipleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCommentMultipleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteCommentMultiple",
		Method:             "DELETE",
		PathPattern:        "/app/rest/builds/multiple/{buildLocator}/comment",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteCommentMultipleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteCommentMultipleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteCommentMultiple: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteMultiple delete multiple API
*/
func (a *Client) DeleteMultiple(params *DeleteMultipleParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteMultipleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteMultipleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteMultiple",
		Method:             "DELETE",
		PathPattern:        "/app/rest/builds/multiple/{buildLocator}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteMultipleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteMultipleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteMultiple: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetArtifactDependencyChanges get artifact dependency changes API
*/
func (a *Client) GetArtifactDependencyChanges(params *GetArtifactDependencyChangesParams, authInfo runtime.ClientAuthInfoWriter) (*GetArtifactDependencyChangesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetArtifactDependencyChangesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getArtifactDependencyChanges",
		Method:             "GET",
		PathPattern:        "/app/rest/builds/{buildLocator}/artifactDependencyChanges",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetArtifactDependencyChangesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetArtifactDependencyChangesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getArtifactDependencyChanges: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetArtifactsDirectory get artifacts directory API
*/
func (a *Client) GetArtifactsDirectory(params *GetArtifactsDirectoryParams, authInfo runtime.ClientAuthInfoWriter) (*GetArtifactsDirectoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetArtifactsDirectoryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getArtifactsDirectory",
		Method:             "GET",
		PathPattern:        "/app/rest/builds/{buildLocator}/artifactsDirectory",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetArtifactsDirectoryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetArtifactsDirectoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getArtifactsDirectory: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetBuildFinishDate get build finish date API
*/
func (a *Client) GetBuildFinishDate(params *GetBuildFinishDateParams, authInfo runtime.ClientAuthInfoWriter) (*GetBuildFinishDateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBuildFinishDateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getBuildFinishDate",
		Method:             "GET",
		PathPattern:        "/app/rest/builds/{buildLocator}/finishDate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetBuildFinishDateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBuildFinishDateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getBuildFinishDate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetBuildNumber get build number API
*/
func (a *Client) GetBuildNumber(params *GetBuildNumberParams, authInfo runtime.ClientAuthInfoWriter) (*GetBuildNumberOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBuildNumberParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getBuildNumber",
		Method:             "GET",
		PathPattern:        "/app/rest/builds/{buildLocator}/number",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetBuildNumberReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBuildNumberOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getBuildNumber: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetBuildStatusText get build status text API
*/
func (a *Client) GetBuildStatusText(params *GetBuildStatusTextParams, authInfo runtime.ClientAuthInfoWriter) (*GetBuildStatusTextOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBuildStatusTextParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getBuildStatusText",
		Method:             "GET",
		PathPattern:        "/app/rest/builds/{buildLocator}/statusText",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetBuildStatusTextReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBuildStatusTextOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getBuildStatusText: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetCanceledInfo get canceled info API
*/
func (a *Client) GetCanceledInfo(params *GetCanceledInfoParams, authInfo runtime.ClientAuthInfoWriter) (*GetCanceledInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCanceledInfoParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getCanceledInfo",
		Method:             "GET",
		PathPattern:        "/app/rest/builds/{buildLocator}/canceledInfo",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCanceledInfoReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCanceledInfoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getCanceledInfo: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetMultiple get multiple API
*/
func (a *Client) GetMultiple(params *GetMultipleParams, authInfo runtime.ClientAuthInfoWriter) (*GetMultipleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMultipleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getMultiple",
		Method:             "GET",
		PathPattern:        "/app/rest/builds/multiple/{buildLocator}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMultipleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetMultipleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getMultiple: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetPinData get pin data API
*/
func (a *Client) GetPinData(params *GetPinDataParams, authInfo runtime.ClientAuthInfoWriter) (*GetPinDataOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPinDataParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getPinData",
		Method:             "GET",
		PathPattern:        "/app/rest/builds/{buildLocator}/pinInfo",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPinDataReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPinDataOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getPinData: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetPinned get pinned API
*/
func (a *Client) GetPinned(params *GetPinnedParams, authInfo runtime.ClientAuthInfoWriter) (*GetPinnedOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPinnedParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getPinned",
		Method:             "GET",
		PathPattern:        "/app/rest/builds/{buildLocator}/pin",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPinnedReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPinnedOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getPinned: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetResolvedParameter get resolved parameter API
*/
func (a *Client) GetResolvedParameter(params *GetResolvedParameterParams, authInfo runtime.ClientAuthInfoWriter) (*GetResolvedParameterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetResolvedParameterParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getResolvedParameter",
		Method:             "GET",
		PathPattern:        "/app/rest/builds/{buildLocator}/resolved/{value}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetResolvedParameterReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetResolvedParameterOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getResolvedParameter: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  MarkBuildAsRunning starts the queued build as an agent less build and returns the corresponding running build
*/
func (a *Client) MarkBuildAsRunning(params *MarkBuildAsRunningParams, authInfo runtime.ClientAuthInfoWriter) (*MarkBuildAsRunningOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMarkBuildAsRunningParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "markBuildAsRunning",
		Method:             "PUT",
		PathPattern:        "/app/rest/builds/{buildLocator}/runningData",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MarkBuildAsRunningReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MarkBuildAsRunningOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for markBuildAsRunning: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PinBuild pin build API
*/
func (a *Client) PinBuild(params *PinBuildParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPinBuildParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "pinBuild",
		Method:             "PUT",
		PathPattern:        "/app/rest/builds/{buildLocator}/pin",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PinBuildReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

/*
  PinMultiple pin multiple API
*/
func (a *Client) PinMultiple(params *PinMultipleParams, authInfo runtime.ClientAuthInfoWriter) (*PinMultipleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPinMultipleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "pinMultiple",
		Method:             "PUT",
		PathPattern:        "/app/rest/builds/multiple/{buildLocator}/pinInfo",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PinMultipleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PinMultipleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for pinMultiple: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RemoveTagsMultiple remove tags multiple API
*/
func (a *Client) RemoveTagsMultiple(params *RemoveTagsMultipleParams, authInfo runtime.ClientAuthInfoWriter) (*RemoveTagsMultipleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRemoveTagsMultipleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "removeTagsMultiple",
		Method:             "DELETE",
		PathPattern:        "/app/rest/builds/multiple/{buildLocator}/tags",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RemoveTagsMultipleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RemoveTagsMultipleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for removeTagsMultiple: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceComment replace comment API
*/
func (a *Client) ReplaceComment(params *ReplaceCommentParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceCommentParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "replaceComment",
		Method:             "PUT",
		PathPattern:        "/app/rest/builds/{buildLocator}/comment",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReplaceCommentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

/*
  ReplaceCommentMultiple replace comment multiple API
*/
func (a *Client) ReplaceCommentMultiple(params *ReplaceCommentMultipleParams, authInfo runtime.ClientAuthInfoWriter) (*ReplaceCommentMultipleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceCommentMultipleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "replaceCommentMultiple",
		Method:             "PUT",
		PathPattern:        "/app/rest/builds/multiple/{buildLocator}/comment",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReplaceCommentMultipleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReplaceCommentMultipleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for replaceCommentMultiple: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceTags replace tags API
*/
func (a *Client) ReplaceTags(params *ReplaceTagsParams, authInfo runtime.ClientAuthInfoWriter) (*ReplaceTagsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceTagsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "replaceTags",
		Method:             "PUT",
		PathPattern:        "/app/rest/builds/{buildLocator}/tags",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReplaceTagsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReplaceTagsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for replaceTags: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ResetBuildFinishParameters reset build finish parameters API
*/
func (a *Client) ResetBuildFinishParameters(params *ResetBuildFinishParametersParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewResetBuildFinishParametersParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "resetBuildFinishParameters",
		Method:             "DELETE",
		PathPattern:        "/app/rest/builds/{buildLocator}/caches/finishProperties",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ResetBuildFinishParametersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

/*
  ServeAggregatedBuildStatus serve aggregated build status API
*/
func (a *Client) ServeAggregatedBuildStatus(params *ServeAggregatedBuildStatusParams, authInfo runtime.ClientAuthInfoWriter) (*ServeAggregatedBuildStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServeAggregatedBuildStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "serveAggregatedBuildStatus",
		Method:             "GET",
		PathPattern:        "/app/rest/builds/aggregated/{buildLocator}/status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ServeAggregatedBuildStatusReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ServeAggregatedBuildStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for serveAggregatedBuildStatus: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ServeAggregatedBuildStatusIcon serve aggregated build status icon API
*/
func (a *Client) ServeAggregatedBuildStatusIcon(params *ServeAggregatedBuildStatusIconParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServeAggregatedBuildStatusIconParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "serveAggregatedBuildStatusIcon",
		Method:             "GET",
		PathPattern:        "/app/rest/builds/aggregated/{buildLocator}/statusIcon{suffix}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ServeAggregatedBuildStatusIconReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

/*
  ServeAllBuilds serve all builds API
*/
func (a *Client) ServeAllBuilds(params *ServeAllBuildsParams, authInfo runtime.ClientAuthInfoWriter) (*ServeAllBuildsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServeAllBuildsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "serveAllBuilds",
		Method:             "GET",
		PathPattern:        "/app/rest/builds",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ServeAllBuildsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ServeAllBuildsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for serveAllBuilds: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ServeBuild serve build API
*/
func (a *Client) ServeBuild(params *ServeBuildParams, authInfo runtime.ClientAuthInfoWriter) (*ServeBuildOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServeBuildParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "serveBuild",
		Method:             "GET",
		PathPattern:        "/app/rest/builds/{buildLocator}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ServeBuildReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ServeBuildOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for serveBuild: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ServeBuildActualParameters serve build actual parameters API
*/
func (a *Client) ServeBuildActualParameters(params *ServeBuildActualParametersParams, authInfo runtime.ClientAuthInfoWriter) (*ServeBuildActualParametersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServeBuildActualParametersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "serveBuildActualParameters",
		Method:             "GET",
		PathPattern:        "/app/rest/builds/{buildLocator}/resulting-properties",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ServeBuildActualParametersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ServeBuildActualParametersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for serveBuildActualParameters: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ServeBuildFieldByBuildOnly serve build field by build only API
*/
func (a *Client) ServeBuildFieldByBuildOnly(params *ServeBuildFieldByBuildOnlyParams, authInfo runtime.ClientAuthInfoWriter) (*ServeBuildFieldByBuildOnlyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServeBuildFieldByBuildOnlyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "serveBuildFieldByBuildOnly",
		Method:             "GET",
		PathPattern:        "/app/rest/builds/{buildLocator}/{field}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ServeBuildFieldByBuildOnlyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ServeBuildFieldByBuildOnlyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for serveBuildFieldByBuildOnly: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ServeBuildRelatedIssues serve build related issues API
*/
func (a *Client) ServeBuildRelatedIssues(params *ServeBuildRelatedIssuesParams, authInfo runtime.ClientAuthInfoWriter) (*ServeBuildRelatedIssuesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServeBuildRelatedIssuesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "serveBuildRelatedIssues",
		Method:             "GET",
		PathPattern:        "/app/rest/builds/{buildLocator}/relatedIssues",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ServeBuildRelatedIssuesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ServeBuildRelatedIssuesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for serveBuildRelatedIssues: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ServeBuildRelatedIssuesOld serve build related issues old API
*/
func (a *Client) ServeBuildRelatedIssuesOld(params *ServeBuildRelatedIssuesOldParams, authInfo runtime.ClientAuthInfoWriter) (*ServeBuildRelatedIssuesOldOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServeBuildRelatedIssuesOldParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "serveBuildRelatedIssuesOld",
		Method:             "GET",
		PathPattern:        "/app/rest/builds/{buildLocator}/related-issues",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ServeBuildRelatedIssuesOldReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ServeBuildRelatedIssuesOldOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for serveBuildRelatedIssuesOld: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ServeBuildStatisticValue serve build statistic value API
*/
func (a *Client) ServeBuildStatisticValue(params *ServeBuildStatisticValueParams, authInfo runtime.ClientAuthInfoWriter) (*ServeBuildStatisticValueOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServeBuildStatisticValueParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "serveBuildStatisticValue",
		Method:             "GET",
		PathPattern:        "/app/rest/builds/{buildLocator}/statistics/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ServeBuildStatisticValueReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ServeBuildStatisticValueOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for serveBuildStatisticValue: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ServeBuildStatisticValues serve build statistic values API
*/
func (a *Client) ServeBuildStatisticValues(params *ServeBuildStatisticValuesParams, authInfo runtime.ClientAuthInfoWriter) (*ServeBuildStatisticValuesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServeBuildStatisticValuesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "serveBuildStatisticValues",
		Method:             "GET",
		PathPattern:        "/app/rest/builds/{buildLocator}/statistics",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ServeBuildStatisticValuesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ServeBuildStatisticValuesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for serveBuildStatisticValues: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ServeBuildStatusIcon serve build status icon API
*/
func (a *Client) ServeBuildStatusIcon(params *ServeBuildStatusIconParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServeBuildStatusIconParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "serveBuildStatusIcon",
		Method:             "GET",
		PathPattern:        "/app/rest/builds/{buildLocator}/statusIcon{suffix}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ServeBuildStatusIconReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

/*
  ServeSourceFile serve source file API
*/
func (a *Client) ServeSourceFile(params *ServeSourceFileParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServeSourceFileParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "serveSourceFile",
		Method:             "GET",
		PathPattern:        "/app/rest/builds/{buildLocator}/sources/files/{fileName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ServeSourceFileReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

/*
  ServeTags serve tags API
*/
func (a *Client) ServeTags(params *ServeTagsParams, authInfo runtime.ClientAuthInfoWriter) (*ServeTagsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServeTagsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "serveTags",
		Method:             "GET",
		PathPattern:        "/app/rest/builds/{buildLocator}/tags",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ServeTagsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ServeTagsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for serveTags: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SetBuildNumber set build number API
*/
func (a *Client) SetBuildNumber(params *SetBuildNumberParams, authInfo runtime.ClientAuthInfoWriter) (*SetBuildNumberOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetBuildNumberParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "setBuildNumber",
		Method:             "PUT",
		PathPattern:        "/app/rest/builds/{buildLocator}/number",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SetBuildNumberReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetBuildNumberOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for setBuildNumber: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SetBuildPinData set build pin data API
*/
func (a *Client) SetBuildPinData(params *SetBuildPinDataParams, authInfo runtime.ClientAuthInfoWriter) (*SetBuildPinDataOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetBuildPinDataParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "setBuildPinData",
		Method:             "PUT",
		PathPattern:        "/app/rest/builds/{buildLocator}/pinInfo",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SetBuildPinDataReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetBuildPinDataOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for setBuildPinData: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SetBuildStatusText set build status text API
*/
func (a *Client) SetBuildStatusText(params *SetBuildStatusTextParams, authInfo runtime.ClientAuthInfoWriter) (*SetBuildStatusTextOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetBuildStatusTextParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "setBuildStatusText",
		Method:             "PUT",
		PathPattern:        "/app/rest/builds/{buildLocator}/statusText",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SetBuildStatusTextReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetBuildStatusTextOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for setBuildStatusText: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SetFinishedTime marks the running build as finished by passing agent time of the build finish an empty finish date means now
*/
func (a *Client) SetFinishedTime(params *SetFinishedTimeParams, authInfo runtime.ClientAuthInfoWriter) (*SetFinishedTimeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetFinishedTimeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "setFinishedTime",
		Method:             "PUT",
		PathPattern:        "/app/rest/builds/{buildLocator}/finishDate",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SetFinishedTimeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetFinishedTimeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for setFinishedTime: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UnpinBuild unpin build API
*/
func (a *Client) UnpinBuild(params *UnpinBuildParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUnpinBuildParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "unpinBuild",
		Method:             "DELETE",
		PathPattern:        "/app/rest/builds/{buildLocator}/pin",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UnpinBuildReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
