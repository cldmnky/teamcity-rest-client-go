// Code generated by go-swagger; DO NOT EDIT.

package agent

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new agent API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for agent API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteAgent(params *DeleteAgentParams, authInfo runtime.ClientAuthInfoWriter) error

	GeIncompatibleBuildTypes(params *GeIncompatibleBuildTypesParams, authInfo runtime.ClientAuthInfoWriter) (*GeIncompatibleBuildTypesOK, error)

	GetAgentPool(params *GetAgentPoolParams, authInfo runtime.ClientAuthInfoWriter) (*GetAgentPoolOK, error)

	GetAllowedRunConfigurations(params *GetAllowedRunConfigurationsParams, authInfo runtime.ClientAuthInfoWriter) (*GetAllowedRunConfigurationsOK, error)

	GetAuthorizedInfo(params *GetAuthorizedInfoParams, authInfo runtime.ClientAuthInfoWriter) (*GetAuthorizedInfoOK, error)

	GetCompatibleBuildTypes(params *GetCompatibleBuildTypesParams, authInfo runtime.ClientAuthInfoWriter) (*GetCompatibleBuildTypesOK, error)

	GetEnabledInfo(params *GetEnabledInfoParams, authInfo runtime.ClientAuthInfoWriter) (*GetEnabledInfoOK, error)

	ServeAgent(params *ServeAgentParams, authInfo runtime.ClientAuthInfoWriter) (*ServeAgentOK, error)

	ServeAgentField(params *ServeAgentFieldParams, authInfo runtime.ClientAuthInfoWriter) (*ServeAgentFieldOK, error)

	ServeAgents(params *ServeAgentsParams, authInfo runtime.ClientAuthInfoWriter) (*ServeAgentsOK, error)

	SetAgentField(params *SetAgentFieldParams, authInfo runtime.ClientAuthInfoWriter) (*SetAgentFieldOK, error)

	SetAgentPool(params *SetAgentPoolParams, authInfo runtime.ClientAuthInfoWriter) (*SetAgentPoolOK, error)

	SetAllowedRunConfigurations(params *SetAllowedRunConfigurationsParams, authInfo runtime.ClientAuthInfoWriter) (*SetAllowedRunConfigurationsOK, error)

	SetAuthorizedInfo(params *SetAuthorizedInfoParams, authInfo runtime.ClientAuthInfoWriter) (*SetAuthorizedInfoOK, error)

	SetEnabledInfo(params *SetEnabledInfoParams, authInfo runtime.ClientAuthInfoWriter) (*SetEnabledInfoOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  DeleteAgent delete agent API
*/
func (a *Client) DeleteAgent(params *DeleteAgentParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAgentParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteAgent",
		Method:             "DELETE",
		PathPattern:        "/app/rest/agents/{agentLocator}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteAgentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

/*
  GeIncompatibleBuildTypes ge incompatible build types API
*/
func (a *Client) GeIncompatibleBuildTypes(params *GeIncompatibleBuildTypesParams, authInfo runtime.ClientAuthInfoWriter) (*GeIncompatibleBuildTypesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGeIncompatibleBuildTypesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "geIncompatibleBuildTypes",
		Method:             "GET",
		PathPattern:        "/app/rest/agents/{agentLocator}/incompatibleBuildTypes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GeIncompatibleBuildTypesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GeIncompatibleBuildTypesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for geIncompatibleBuildTypes: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAgentPool get agent pool API
*/
func (a *Client) GetAgentPool(params *GetAgentPoolParams, authInfo runtime.ClientAuthInfoWriter) (*GetAgentPoolOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAgentPoolParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAgentPool",
		Method:             "GET",
		PathPattern:        "/app/rest/agents/{agentLocator}/pool",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAgentPoolReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAgentPoolOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAgentPool: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAllowedRunConfigurations get allowed run configurations API
*/
func (a *Client) GetAllowedRunConfigurations(params *GetAllowedRunConfigurationsParams, authInfo runtime.ClientAuthInfoWriter) (*GetAllowedRunConfigurationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllowedRunConfigurationsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAllowedRunConfigurations",
		Method:             "GET",
		PathPattern:        "/app/rest/agents/{agentLocator}/compatibilityPolicy",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAllowedRunConfigurationsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllowedRunConfigurationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllowedRunConfigurations: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAuthorizedInfo get authorized info API
*/
func (a *Client) GetAuthorizedInfo(params *GetAuthorizedInfoParams, authInfo runtime.ClientAuthInfoWriter) (*GetAuthorizedInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAuthorizedInfoParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAuthorizedInfo",
		Method:             "GET",
		PathPattern:        "/app/rest/agents/{agentLocator}/authorizedInfo",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAuthorizedInfoReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAuthorizedInfoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAuthorizedInfo: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetCompatibleBuildTypes get compatible build types API
*/
func (a *Client) GetCompatibleBuildTypes(params *GetCompatibleBuildTypesParams, authInfo runtime.ClientAuthInfoWriter) (*GetCompatibleBuildTypesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCompatibleBuildTypesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getCompatibleBuildTypes",
		Method:             "GET",
		PathPattern:        "/app/rest/agents/{agentLocator}/compatibleBuildTypes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCompatibleBuildTypesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCompatibleBuildTypesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getCompatibleBuildTypes: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetEnabledInfo get enabled info API
*/
func (a *Client) GetEnabledInfo(params *GetEnabledInfoParams, authInfo runtime.ClientAuthInfoWriter) (*GetEnabledInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEnabledInfoParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getEnabledInfo",
		Method:             "GET",
		PathPattern:        "/app/rest/agents/{agentLocator}/enabledInfo",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetEnabledInfoReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetEnabledInfoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getEnabledInfo: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ServeAgent serve agent API
*/
func (a *Client) ServeAgent(params *ServeAgentParams, authInfo runtime.ClientAuthInfoWriter) (*ServeAgentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServeAgentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "serveAgent",
		Method:             "GET",
		PathPattern:        "/app/rest/agents/{agentLocator}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ServeAgentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ServeAgentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for serveAgent: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ServeAgentField serve agent field API
*/
func (a *Client) ServeAgentField(params *ServeAgentFieldParams, authInfo runtime.ClientAuthInfoWriter) (*ServeAgentFieldOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServeAgentFieldParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "serveAgentField",
		Method:             "GET",
		PathPattern:        "/app/rest/agents/{agentLocator}/{field}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ServeAgentFieldReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ServeAgentFieldOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for serveAgentField: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ServeAgents serve agents API
*/
func (a *Client) ServeAgents(params *ServeAgentsParams, authInfo runtime.ClientAuthInfoWriter) (*ServeAgentsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServeAgentsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "serveAgents",
		Method:             "GET",
		PathPattern:        "/app/rest/agents",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ServeAgentsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ServeAgentsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for serveAgents: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SetAgentField set agent field API
*/
func (a *Client) SetAgentField(params *SetAgentFieldParams, authInfo runtime.ClientAuthInfoWriter) (*SetAgentFieldOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetAgentFieldParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "setAgentField",
		Method:             "PUT",
		PathPattern:        "/app/rest/agents/{agentLocator}/{field}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SetAgentFieldReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetAgentFieldOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for setAgentField: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SetAgentPool set agent pool API
*/
func (a *Client) SetAgentPool(params *SetAgentPoolParams, authInfo runtime.ClientAuthInfoWriter) (*SetAgentPoolOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetAgentPoolParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "setAgentPool",
		Method:             "PUT",
		PathPattern:        "/app/rest/agents/{agentLocator}/pool",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SetAgentPoolReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetAgentPoolOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for setAgentPool: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SetAllowedRunConfigurations set allowed run configurations API
*/
func (a *Client) SetAllowedRunConfigurations(params *SetAllowedRunConfigurationsParams, authInfo runtime.ClientAuthInfoWriter) (*SetAllowedRunConfigurationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetAllowedRunConfigurationsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "setAllowedRunConfigurations",
		Method:             "PUT",
		PathPattern:        "/app/rest/agents/{agentLocator}/compatibilityPolicy",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SetAllowedRunConfigurationsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetAllowedRunConfigurationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for setAllowedRunConfigurations: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SetAuthorizedInfo set authorized info API
*/
func (a *Client) SetAuthorizedInfo(params *SetAuthorizedInfoParams, authInfo runtime.ClientAuthInfoWriter) (*SetAuthorizedInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetAuthorizedInfoParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "setAuthorizedInfo",
		Method:             "PUT",
		PathPattern:        "/app/rest/agents/{agentLocator}/authorizedInfo",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SetAuthorizedInfoReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetAuthorizedInfoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for setAuthorizedInfo: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SetEnabledInfo set enabled info API
*/
func (a *Client) SetEnabledInfo(params *SetEnabledInfoParams, authInfo runtime.ClientAuthInfoWriter) (*SetEnabledInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetEnabledInfoParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "setEnabledInfo",
		Method:             "PUT",
		PathPattern:        "/app/rest/agents/{agentLocator}/enabledInfo",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SetEnabledInfoReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetEnabledInfoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for setEnabledInfo: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
