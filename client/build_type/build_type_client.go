// Code generated by go-swagger; DO NOT EDIT.

package build_type

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new build type API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for build type API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	PutAppRestBuildTypesBtLocatorParametersName(params *PutAppRestBuildTypesBtLocatorParametersNameParams, authInfo runtime.ClientAuthInfoWriter) (*PutAppRestBuildTypesBtLocatorParametersNameOK, error)

	PutAppRestBuildTypesBtLocatorSettingsName(params *PutAppRestBuildTypesBtLocatorSettingsNameParams, authInfo runtime.ClientAuthInfoWriter) (*PutAppRestBuildTypesBtLocatorSettingsNameOK, error)

	AddAgentRequirement(params *AddAgentRequirementParams, authInfo runtime.ClientAuthInfoWriter) (*AddAgentRequirementOK, error)

	AddArtifactDep(params *AddArtifactDepParams, authInfo runtime.ClientAuthInfoWriter) (*AddArtifactDepOK, error)

	AddBuildType(params *AddBuildTypeParams, authInfo runtime.ClientAuthInfoWriter) (*AddBuildTypeOK, error)

	AddFeature(params *AddFeatureParams, authInfo runtime.ClientAuthInfoWriter) (*AddFeatureOK, error)

	AddFeatureParameter(params *AddFeatureParameterParams, authInfo runtime.ClientAuthInfoWriter) (*AddFeatureParameterOK, error)

	AddSnapshotDep(params *AddSnapshotDepParams, authInfo runtime.ClientAuthInfoWriter) (*AddSnapshotDepOK, error)

	AddStep(params *AddStepParams, authInfo runtime.ClientAuthInfoWriter) (*AddStepOK, error)

	AddStepParameter(params *AddStepParameterParams, authInfo runtime.ClientAuthInfoWriter) (*AddStepParameterOK, error)

	AddTemplate(params *AddTemplateParams, authInfo runtime.ClientAuthInfoWriter) (*AddTemplateOK, error)

	AddTrigger(params *AddTriggerParams, authInfo runtime.ClientAuthInfoWriter) (*AddTriggerOK, error)

	AddVcsRootEntry(params *AddVcsRootEntryParams, authInfo runtime.ClientAuthInfoWriter) (*AddVcsRootEntryOK, error)

	ChangeArtifactDepSetting(params *ChangeArtifactDepSettingParams, authInfo runtime.ClientAuthInfoWriter) (*ChangeArtifactDepSettingOK, error)

	ChangeFeatureSetting(params *ChangeFeatureSettingParams, authInfo runtime.ClientAuthInfoWriter) (*ChangeFeatureSettingOK, error)

	ChangeRequirementSetting(params *ChangeRequirementSettingParams, authInfo runtime.ClientAuthInfoWriter) (*ChangeRequirementSettingOK, error)

	ChangeStepSetting(params *ChangeStepSettingParams, authInfo runtime.ClientAuthInfoWriter) (*ChangeStepSettingOK, error)

	ChangeTriggerSetting(params *ChangeTriggerSettingParams, authInfo runtime.ClientAuthInfoWriter) (*ChangeTriggerSettingOK, error)

	DeleteAgentRequirement(params *DeleteAgentRequirementParams, authInfo runtime.ClientAuthInfoWriter) error

	DeleteArtifactDep(params *DeleteArtifactDepParams, authInfo runtime.ClientAuthInfoWriter) error

	DeleteBuildType(params *DeleteBuildTypeParams, authInfo runtime.ClientAuthInfoWriter) error

	DeleteFeature(params *DeleteFeatureParams, authInfo runtime.ClientAuthInfoWriter) error

	DeleteSnapshotDep(params *DeleteSnapshotDepParams, authInfo runtime.ClientAuthInfoWriter) error

	DeleteStep(params *DeleteStepParams, authInfo runtime.ClientAuthInfoWriter) error

	DeleteTrigger(params *DeleteTriggerParams, authInfo runtime.ClientAuthInfoWriter) error

	DeleteVcsRootEntry(params *DeleteVcsRootEntryParams, authInfo runtime.ClientAuthInfoWriter) error

	GetAgentRequirement(params *GetAgentRequirementParams, authInfo runtime.ClientAuthInfoWriter) (*GetAgentRequirementOK, error)

	GetAgentRequirements(params *GetAgentRequirementsParams, authInfo runtime.ClientAuthInfoWriter) (*GetAgentRequirementsOK, error)

	GetAliases(params *GetAliasesParams, authInfo runtime.ClientAuthInfoWriter) (*GetAliasesOK, error)

	GetArtifactDep(params *GetArtifactDepParams, authInfo runtime.ClientAuthInfoWriter) (*GetArtifactDepOK, error)

	GetArtifactDepSetting(params *GetArtifactDepSettingParams, authInfo runtime.ClientAuthInfoWriter) (*GetArtifactDepSettingOK, error)

	GetArtifactDeps(params *GetArtifactDepsParams, authInfo runtime.ClientAuthInfoWriter) (*GetArtifactDepsOK, error)

	GetBuildTypes(params *GetBuildTypesParams, authInfo runtime.ClientAuthInfoWriter) (*GetBuildTypesOK, error)

	GetCurrentVcsInstances(params *GetCurrentVcsInstancesParams, authInfo runtime.ClientAuthInfoWriter) (*GetCurrentVcsInstancesOK, error)

	GetCurrentVcsInstancesObsolete(params *GetCurrentVcsInstancesObsoleteParams, authInfo runtime.ClientAuthInfoWriter) (*GetCurrentVcsInstancesObsoleteOK, error)

	GetFeature(params *GetFeatureParams, authInfo runtime.ClientAuthInfoWriter) (*GetFeatureOK, error)

	GetFeatureParameter(params *GetFeatureParameterParams, authInfo runtime.ClientAuthInfoWriter) (*GetFeatureParameterOK, error)

	GetFeatureParameters(params *GetFeatureParametersParams, authInfo runtime.ClientAuthInfoWriter) (*GetFeatureParametersOK, error)

	GetFeatureSetting(params *GetFeatureSettingParams, authInfo runtime.ClientAuthInfoWriter) (*GetFeatureSettingOK, error)

	GetFeatures(params *GetFeaturesParams, authInfo runtime.ClientAuthInfoWriter) (*GetFeaturesOK, error)

	GetRequirementSetting(params *GetRequirementSettingParams, authInfo runtime.ClientAuthInfoWriter) (*GetRequirementSettingOK, error)

	GetSnapshotDep(params *GetSnapshotDepParams, authInfo runtime.ClientAuthInfoWriter) (*GetSnapshotDepOK, error)

	GetSnapshotDeps(params *GetSnapshotDepsParams, authInfo runtime.ClientAuthInfoWriter) (*GetSnapshotDepsOK, error)

	GetStep(params *GetStepParams, authInfo runtime.ClientAuthInfoWriter) (*GetStepOK, error)

	GetStepParameter(params *GetStepParameterParams, authInfo runtime.ClientAuthInfoWriter) (*GetStepParameterOK, error)

	GetStepParameters(params *GetStepParametersParams, authInfo runtime.ClientAuthInfoWriter) (*GetStepParametersOK, error)

	GetStepSetting(params *GetStepSettingParams, authInfo runtime.ClientAuthInfoWriter) (*GetStepSettingOK, error)

	GetSteps(params *GetStepsParams, authInfo runtime.ClientAuthInfoWriter) (*GetStepsOK, error)

	GetTemplate(params *GetTemplateParams, authInfo runtime.ClientAuthInfoWriter) (*GetTemplateOK, error)

	GetTemplates(params *GetTemplatesParams, authInfo runtime.ClientAuthInfoWriter) (*GetTemplatesOK, error)

	GetTrigger(params *GetTriggerParams, authInfo runtime.ClientAuthInfoWriter) (*GetTriggerOK, error)

	GetTriggerSetting(params *GetTriggerSettingParams, authInfo runtime.ClientAuthInfoWriter) (*GetTriggerSettingOK, error)

	GetTriggers(params *GetTriggersParams, authInfo runtime.ClientAuthInfoWriter) (*GetTriggersOK, error)

	GetVCSLabelingOptions(params *GetVCSLabelingOptionsParams, authInfo runtime.ClientAuthInfoWriter) (*GetVCSLabelingOptionsOK, error)

	GetVcsRootEntries(params *GetVcsRootEntriesParams, authInfo runtime.ClientAuthInfoWriter) (*GetVcsRootEntriesOK, error)

	GetVcsRootEntry(params *GetVcsRootEntryParams, authInfo runtime.ClientAuthInfoWriter) (*GetVcsRootEntryOK, error)

	GetVcsRootEntryCheckoutRules(params *GetVcsRootEntryCheckoutRulesParams, authInfo runtime.ClientAuthInfoWriter) (*GetVcsRootEntryCheckoutRulesOK, error)

	RemoveAllTemplates(params *RemoveAllTemplatesParams, authInfo runtime.ClientAuthInfoWriter) error

	RemoveTemplate(params *RemoveTemplateParams, authInfo runtime.ClientAuthInfoWriter) error

	ReplaceAgentRequirement(params *ReplaceAgentRequirementParams, authInfo runtime.ClientAuthInfoWriter) (*ReplaceAgentRequirementOK, error)

	ReplaceAgentRequirements(params *ReplaceAgentRequirementsParams, authInfo runtime.ClientAuthInfoWriter) (*ReplaceAgentRequirementsOK, error)

	ReplaceArtifactDep(params *ReplaceArtifactDepParams, authInfo runtime.ClientAuthInfoWriter) (*ReplaceArtifactDepOK, error)

	ReplaceArtifactDeps(params *ReplaceArtifactDepsParams, authInfo runtime.ClientAuthInfoWriter) (*ReplaceArtifactDepsOK, error)

	ReplaceFeature(params *ReplaceFeatureParams, authInfo runtime.ClientAuthInfoWriter) (*ReplaceFeatureOK, error)

	ReplaceFeatureParameters(params *ReplaceFeatureParametersParams, authInfo runtime.ClientAuthInfoWriter) (*ReplaceFeatureParametersOK, error)

	ReplaceFeatures(params *ReplaceFeaturesParams, authInfo runtime.ClientAuthInfoWriter) (*ReplaceFeaturesOK, error)

	ReplaceSnapshotDep(params *ReplaceSnapshotDepParams, authInfo runtime.ClientAuthInfoWriter) (*ReplaceSnapshotDepOK, error)

	ReplaceSnapshotDeps(params *ReplaceSnapshotDepsParams, authInfo runtime.ClientAuthInfoWriter) (*ReplaceSnapshotDepsOK, error)

	ReplaceStep(params *ReplaceStepParams, authInfo runtime.ClientAuthInfoWriter) (*ReplaceStepOK, error)

	ReplaceStepParameters(params *ReplaceStepParametersParams, authInfo runtime.ClientAuthInfoWriter) (*ReplaceStepParametersOK, error)

	ReplaceSteps(params *ReplaceStepsParams, authInfo runtime.ClientAuthInfoWriter) (*ReplaceStepsOK, error)

	ReplaceTrigger(params *ReplaceTriggerParams, authInfo runtime.ClientAuthInfoWriter) (*ReplaceTriggerOK, error)

	ReplaceTriggers(params *ReplaceTriggersParams, authInfo runtime.ClientAuthInfoWriter) (*ReplaceTriggersOK, error)

	ReplaceVcsRootEntries(params *ReplaceVcsRootEntriesParams, authInfo runtime.ClientAuthInfoWriter) (*ReplaceVcsRootEntriesOK, error)

	ServeBranches(params *ServeBranchesParams, authInfo runtime.ClientAuthInfoWriter) (*ServeBranchesOK, error)

	ServeBuildField(params *ServeBuildFieldParams, authInfo runtime.ClientAuthInfoWriter) (*ServeBuildFieldOK, error)

	ServeBuildTypeBuildsTags(params *ServeBuildTypeBuildsTagsParams, authInfo runtime.ClientAuthInfoWriter) (*ServeBuildTypeBuildsTagsOK, error)

	ServeBuildTypeField(params *ServeBuildTypeFieldParams, authInfo runtime.ClientAuthInfoWriter) (*ServeBuildTypeFieldOK, error)

	ServeBuildTypeXML(params *ServeBuildTypeXMLParams, authInfo runtime.ClientAuthInfoWriter) (*ServeBuildTypeXMLOK, error)

	SetBuildTypeField(params *SetBuildTypeFieldParams, authInfo runtime.ClientAuthInfoWriter) (*SetBuildTypeFieldOK, error)

	SetTemplates(params *SetTemplatesParams, authInfo runtime.ClientAuthInfoWriter) (*SetTemplatesOK, error)

	SetVCSLabelingOptions(params *SetVCSLabelingOptionsParams, authInfo runtime.ClientAuthInfoWriter) (*SetVCSLabelingOptionsOK, error)

	UpdateVcsRootEntry(params *UpdateVcsRootEntryParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateVcsRootEntryOK, error)

	UpdateVcsRootEntryCheckoutRules(params *UpdateVcsRootEntryCheckoutRulesParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateVcsRootEntryCheckoutRulesOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  PutAppRestBuildTypesBtLocatorParametersName put app rest build types bt locator parameters name API
*/
func (a *Client) PutAppRestBuildTypesBtLocatorParametersName(params *PutAppRestBuildTypesBtLocatorParametersNameParams, authInfo runtime.ClientAuthInfoWriter) (*PutAppRestBuildTypesBtLocatorParametersNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutAppRestBuildTypesBtLocatorParametersNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutAppRestBuildTypesBtLocatorParametersName",
		Method:             "PUT",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/parameters/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutAppRestBuildTypesBtLocatorParametersNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutAppRestBuildTypesBtLocatorParametersNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutAppRestBuildTypesBtLocatorParametersName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutAppRestBuildTypesBtLocatorSettingsName put app rest build types bt locator settings name API
*/
func (a *Client) PutAppRestBuildTypesBtLocatorSettingsName(params *PutAppRestBuildTypesBtLocatorSettingsNameParams, authInfo runtime.ClientAuthInfoWriter) (*PutAppRestBuildTypesBtLocatorSettingsNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutAppRestBuildTypesBtLocatorSettingsNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutAppRestBuildTypesBtLocatorSettingsName",
		Method:             "PUT",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/settings/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutAppRestBuildTypesBtLocatorSettingsNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutAppRestBuildTypesBtLocatorSettingsNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutAppRestBuildTypesBtLocatorSettingsName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  AddAgentRequirement add agent requirement API
*/
func (a *Client) AddAgentRequirement(params *AddAgentRequirementParams, authInfo runtime.ClientAuthInfoWriter) (*AddAgentRequirementOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddAgentRequirementParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addAgentRequirement",
		Method:             "POST",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/agent-requirements",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddAgentRequirementReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddAgentRequirementOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for addAgentRequirement: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  AddArtifactDep add artifact dep API
*/
func (a *Client) AddArtifactDep(params *AddArtifactDepParams, authInfo runtime.ClientAuthInfoWriter) (*AddArtifactDepOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddArtifactDepParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addArtifactDep",
		Method:             "POST",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/artifact-dependencies",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddArtifactDepReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddArtifactDepOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for addArtifactDep: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  AddBuildType add build type API
*/
func (a *Client) AddBuildType(params *AddBuildTypeParams, authInfo runtime.ClientAuthInfoWriter) (*AddBuildTypeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddBuildTypeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addBuildType",
		Method:             "POST",
		PathPattern:        "/app/rest/buildTypes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddBuildTypeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddBuildTypeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for addBuildType: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  AddFeature add feature API
*/
func (a *Client) AddFeature(params *AddFeatureParams, authInfo runtime.ClientAuthInfoWriter) (*AddFeatureOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddFeatureParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addFeature",
		Method:             "POST",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/features",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddFeatureReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddFeatureOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for addFeature: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  AddFeatureParameter add feature parameter API
*/
func (a *Client) AddFeatureParameter(params *AddFeatureParameterParams, authInfo runtime.ClientAuthInfoWriter) (*AddFeatureParameterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddFeatureParameterParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addFeatureParameter",
		Method:             "PUT",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/features/{featureId}/parameters/{parameterName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddFeatureParameterReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddFeatureParameterOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for addFeatureParameter: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  AddSnapshotDep add snapshot dep API
*/
func (a *Client) AddSnapshotDep(params *AddSnapshotDepParams, authInfo runtime.ClientAuthInfoWriter) (*AddSnapshotDepOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddSnapshotDepParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addSnapshotDep",
		Method:             "POST",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/snapshot-dependencies",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddSnapshotDepReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddSnapshotDepOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for addSnapshotDep: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  AddStep add step API
*/
func (a *Client) AddStep(params *AddStepParams, authInfo runtime.ClientAuthInfoWriter) (*AddStepOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddStepParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addStep",
		Method:             "POST",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/steps",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddStepReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddStepOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for addStep: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  AddStepParameter add step parameter API
*/
func (a *Client) AddStepParameter(params *AddStepParameterParams, authInfo runtime.ClientAuthInfoWriter) (*AddStepParameterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddStepParameterParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addStepParameter",
		Method:             "PUT",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/steps/{stepId}/parameters/{parameterName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddStepParameterReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddStepParameterOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for addStepParameter: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  AddTemplate add template API
*/
func (a *Client) AddTemplate(params *AddTemplateParams, authInfo runtime.ClientAuthInfoWriter) (*AddTemplateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddTemplateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addTemplate",
		Method:             "POST",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/templates",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddTemplateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddTemplateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for addTemplate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  AddTrigger add trigger API
*/
func (a *Client) AddTrigger(params *AddTriggerParams, authInfo runtime.ClientAuthInfoWriter) (*AddTriggerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddTriggerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addTrigger",
		Method:             "POST",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/triggers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddTriggerReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddTriggerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for addTrigger: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  AddVcsRootEntry add vcs root entry API
*/
func (a *Client) AddVcsRootEntry(params *AddVcsRootEntryParams, authInfo runtime.ClientAuthInfoWriter) (*AddVcsRootEntryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddVcsRootEntryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addVcsRootEntry",
		Method:             "POST",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/vcs-root-entries",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddVcsRootEntryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddVcsRootEntryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for addVcsRootEntry: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ChangeArtifactDepSetting change artifact dep setting API
*/
func (a *Client) ChangeArtifactDepSetting(params *ChangeArtifactDepSettingParams, authInfo runtime.ClientAuthInfoWriter) (*ChangeArtifactDepSettingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewChangeArtifactDepSettingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "changeArtifactDepSetting",
		Method:             "PUT",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/artifact-dependencies/{artifactDepLocator}/{fieldName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ChangeArtifactDepSettingReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ChangeArtifactDepSettingOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for changeArtifactDepSetting: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ChangeFeatureSetting change feature setting API
*/
func (a *Client) ChangeFeatureSetting(params *ChangeFeatureSettingParams, authInfo runtime.ClientAuthInfoWriter) (*ChangeFeatureSettingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewChangeFeatureSettingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "changeFeatureSetting",
		Method:             "PUT",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/features/{featureId}/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ChangeFeatureSettingReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ChangeFeatureSettingOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for changeFeatureSetting: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ChangeRequirementSetting change requirement setting API
*/
func (a *Client) ChangeRequirementSetting(params *ChangeRequirementSettingParams, authInfo runtime.ClientAuthInfoWriter) (*ChangeRequirementSettingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewChangeRequirementSettingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "changeRequirementSetting",
		Method:             "PUT",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/agent-requirements/{agentRequirementLocator}/{fieldName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ChangeRequirementSettingReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ChangeRequirementSettingOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for changeRequirementSetting: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ChangeStepSetting change step setting API
*/
func (a *Client) ChangeStepSetting(params *ChangeStepSettingParams, authInfo runtime.ClientAuthInfoWriter) (*ChangeStepSettingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewChangeStepSettingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "changeStepSetting",
		Method:             "PUT",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/steps/{stepId}/{fieldName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ChangeStepSettingReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ChangeStepSettingOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for changeStepSetting: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ChangeTriggerSetting change trigger setting API
*/
func (a *Client) ChangeTriggerSetting(params *ChangeTriggerSettingParams, authInfo runtime.ClientAuthInfoWriter) (*ChangeTriggerSettingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewChangeTriggerSettingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "changeTriggerSetting",
		Method:             "PUT",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/triggers/{triggerLocator}/{fieldName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ChangeTriggerSettingReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ChangeTriggerSettingOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for changeTriggerSetting: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteAgentRequirement delete agent requirement API
*/
func (a *Client) DeleteAgentRequirement(params *DeleteAgentRequirementParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAgentRequirementParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteAgentRequirement",
		Method:             "DELETE",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/agent-requirements/{agentRequirementLocator}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteAgentRequirementReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

/*
  DeleteArtifactDep delete artifact dep API
*/
func (a *Client) DeleteArtifactDep(params *DeleteArtifactDepParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteArtifactDepParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteArtifactDep",
		Method:             "DELETE",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/artifact-dependencies/{artifactDepLocator}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteArtifactDepReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

/*
  DeleteBuildType delete build type API
*/
func (a *Client) DeleteBuildType(params *DeleteBuildTypeParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteBuildTypeParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteBuildType",
		Method:             "DELETE",
		PathPattern:        "/app/rest/buildTypes/{btLocator}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteBuildTypeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

/*
  DeleteFeature delete feature API
*/
func (a *Client) DeleteFeature(params *DeleteFeatureParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteFeatureParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteFeature",
		Method:             "DELETE",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/features/{featureId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteFeatureReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

/*
  DeleteSnapshotDep delete snapshot dep API
*/
func (a *Client) DeleteSnapshotDep(params *DeleteSnapshotDepParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSnapshotDepParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteSnapshotDep",
		Method:             "DELETE",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/snapshot-dependencies/{snapshotDepLocator}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteSnapshotDepReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

/*
  DeleteStep delete step API
*/
func (a *Client) DeleteStep(params *DeleteStepParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteStepParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteStep",
		Method:             "DELETE",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/steps/{stepId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteStepReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

/*
  DeleteTrigger delete trigger API
*/
func (a *Client) DeleteTrigger(params *DeleteTriggerParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteTriggerParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteTrigger",
		Method:             "DELETE",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/triggers/{triggerLocator}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteTriggerReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

/*
  DeleteVcsRootEntry delete vcs root entry API
*/
func (a *Client) DeleteVcsRootEntry(params *DeleteVcsRootEntryParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteVcsRootEntryParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteVcsRootEntry",
		Method:             "DELETE",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/vcs-root-entries/{vcsRootLocator}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteVcsRootEntryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

/*
  GetAgentRequirement get agent requirement API
*/
func (a *Client) GetAgentRequirement(params *GetAgentRequirementParams, authInfo runtime.ClientAuthInfoWriter) (*GetAgentRequirementOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAgentRequirementParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAgentRequirement",
		Method:             "GET",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/agent-requirements/{agentRequirementLocator}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAgentRequirementReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAgentRequirementOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAgentRequirement: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAgentRequirements get agent requirements API
*/
func (a *Client) GetAgentRequirements(params *GetAgentRequirementsParams, authInfo runtime.ClientAuthInfoWriter) (*GetAgentRequirementsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAgentRequirementsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAgentRequirements",
		Method:             "GET",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/agent-requirements",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAgentRequirementsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAgentRequirementsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAgentRequirements: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAliases get aliases API
*/
func (a *Client) GetAliases(params *GetAliasesParams, authInfo runtime.ClientAuthInfoWriter) (*GetAliasesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAliasesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAliases",
		Method:             "GET",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/aliases",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAliasesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAliasesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAliases: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetArtifactDep get artifact dep API
*/
func (a *Client) GetArtifactDep(params *GetArtifactDepParams, authInfo runtime.ClientAuthInfoWriter) (*GetArtifactDepOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetArtifactDepParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getArtifactDep",
		Method:             "GET",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/artifact-dependencies/{artifactDepLocator}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetArtifactDepReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetArtifactDepOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getArtifactDep: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetArtifactDepSetting get artifact dep setting API
*/
func (a *Client) GetArtifactDepSetting(params *GetArtifactDepSettingParams, authInfo runtime.ClientAuthInfoWriter) (*GetArtifactDepSettingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetArtifactDepSettingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getArtifactDepSetting",
		Method:             "GET",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/artifact-dependencies/{artifactDepLocator}/{fieldName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetArtifactDepSettingReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetArtifactDepSettingOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getArtifactDepSetting: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetArtifactDeps get artifact deps API
*/
func (a *Client) GetArtifactDeps(params *GetArtifactDepsParams, authInfo runtime.ClientAuthInfoWriter) (*GetArtifactDepsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetArtifactDepsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getArtifactDeps",
		Method:             "GET",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/artifact-dependencies",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetArtifactDepsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetArtifactDepsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getArtifactDeps: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetBuildTypes get build types API
*/
func (a *Client) GetBuildTypes(params *GetBuildTypesParams, authInfo runtime.ClientAuthInfoWriter) (*GetBuildTypesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBuildTypesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getBuildTypes",
		Method:             "GET",
		PathPattern:        "/app/rest/buildTypes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetBuildTypesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBuildTypesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getBuildTypes: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetCurrentVcsInstances get current vcs instances API
*/
func (a *Client) GetCurrentVcsInstances(params *GetCurrentVcsInstancesParams, authInfo runtime.ClientAuthInfoWriter) (*GetCurrentVcsInstancesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCurrentVcsInstancesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getCurrentVcsInstances",
		Method:             "GET",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/vcsRootInstances",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCurrentVcsInstancesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCurrentVcsInstancesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getCurrentVcsInstances: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetCurrentVcsInstancesObsolete get current vcs instances obsolete API
*/
func (a *Client) GetCurrentVcsInstancesObsolete(params *GetCurrentVcsInstancesObsoleteParams, authInfo runtime.ClientAuthInfoWriter) (*GetCurrentVcsInstancesObsoleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCurrentVcsInstancesObsoleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getCurrentVcsInstancesObsolete",
		Method:             "GET",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/vcs-root-instances",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCurrentVcsInstancesObsoleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCurrentVcsInstancesObsoleteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getCurrentVcsInstancesObsolete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetFeature get feature API
*/
func (a *Client) GetFeature(params *GetFeatureParams, authInfo runtime.ClientAuthInfoWriter) (*GetFeatureOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFeatureParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getFeature",
		Method:             "GET",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/features/{featureId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetFeatureReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetFeatureOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getFeature: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetFeatureParameter get feature parameter API
*/
func (a *Client) GetFeatureParameter(params *GetFeatureParameterParams, authInfo runtime.ClientAuthInfoWriter) (*GetFeatureParameterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFeatureParameterParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getFeatureParameter",
		Method:             "GET",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/features/{featureId}/parameters/{parameterName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetFeatureParameterReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetFeatureParameterOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getFeatureParameter: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetFeatureParameters get feature parameters API
*/
func (a *Client) GetFeatureParameters(params *GetFeatureParametersParams, authInfo runtime.ClientAuthInfoWriter) (*GetFeatureParametersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFeatureParametersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getFeatureParameters",
		Method:             "GET",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/features/{featureId}/parameters",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetFeatureParametersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetFeatureParametersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getFeatureParameters: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetFeatureSetting get feature setting API
*/
func (a *Client) GetFeatureSetting(params *GetFeatureSettingParams, authInfo runtime.ClientAuthInfoWriter) (*GetFeatureSettingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFeatureSettingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getFeatureSetting",
		Method:             "GET",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/features/{featureId}/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetFeatureSettingReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetFeatureSettingOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getFeatureSetting: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetFeatures get features API
*/
func (a *Client) GetFeatures(params *GetFeaturesParams, authInfo runtime.ClientAuthInfoWriter) (*GetFeaturesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFeaturesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getFeatures",
		Method:             "GET",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/features",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetFeaturesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetFeaturesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getFeatures: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetRequirementSetting get requirement setting API
*/
func (a *Client) GetRequirementSetting(params *GetRequirementSettingParams, authInfo runtime.ClientAuthInfoWriter) (*GetRequirementSettingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRequirementSettingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getRequirementSetting",
		Method:             "GET",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/agent-requirements/{agentRequirementLocator}/{fieldName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRequirementSettingReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRequirementSettingOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getRequirementSetting: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetSnapshotDep get snapshot dep API
*/
func (a *Client) GetSnapshotDep(params *GetSnapshotDepParams, authInfo runtime.ClientAuthInfoWriter) (*GetSnapshotDepOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSnapshotDepParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSnapshotDep",
		Method:             "GET",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/snapshot-dependencies/{snapshotDepLocator}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSnapshotDepReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSnapshotDepOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getSnapshotDep: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetSnapshotDeps get snapshot deps API
*/
func (a *Client) GetSnapshotDeps(params *GetSnapshotDepsParams, authInfo runtime.ClientAuthInfoWriter) (*GetSnapshotDepsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSnapshotDepsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSnapshotDeps",
		Method:             "GET",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/snapshot-dependencies",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSnapshotDepsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSnapshotDepsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getSnapshotDeps: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetStep get step API
*/
func (a *Client) GetStep(params *GetStepParams, authInfo runtime.ClientAuthInfoWriter) (*GetStepOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetStepParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getStep",
		Method:             "GET",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/steps/{stepId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetStepReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetStepOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getStep: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetStepParameter get step parameter API
*/
func (a *Client) GetStepParameter(params *GetStepParameterParams, authInfo runtime.ClientAuthInfoWriter) (*GetStepParameterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetStepParameterParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getStepParameter",
		Method:             "GET",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/steps/{stepId}/parameters/{parameterName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetStepParameterReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetStepParameterOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getStepParameter: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetStepParameters get step parameters API
*/
func (a *Client) GetStepParameters(params *GetStepParametersParams, authInfo runtime.ClientAuthInfoWriter) (*GetStepParametersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetStepParametersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getStepParameters",
		Method:             "GET",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/steps/{stepId}/parameters",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetStepParametersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetStepParametersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getStepParameters: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetStepSetting get step setting API
*/
func (a *Client) GetStepSetting(params *GetStepSettingParams, authInfo runtime.ClientAuthInfoWriter) (*GetStepSettingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetStepSettingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getStepSetting",
		Method:             "GET",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/steps/{stepId}/{fieldName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetStepSettingReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetStepSettingOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getStepSetting: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetSteps get steps API
*/
func (a *Client) GetSteps(params *GetStepsParams, authInfo runtime.ClientAuthInfoWriter) (*GetStepsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetStepsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSteps",
		Method:             "GET",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/steps",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetStepsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetStepsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getSteps: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetTemplate get template API
*/
func (a *Client) GetTemplate(params *GetTemplateParams, authInfo runtime.ClientAuthInfoWriter) (*GetTemplateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTemplateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTemplate",
		Method:             "GET",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/templates/{templateLocator}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTemplateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTemplateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getTemplate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetTemplates get templates API
*/
func (a *Client) GetTemplates(params *GetTemplatesParams, authInfo runtime.ClientAuthInfoWriter) (*GetTemplatesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTemplatesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTemplates",
		Method:             "GET",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/templates",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTemplatesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTemplatesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getTemplates: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetTrigger get trigger API
*/
func (a *Client) GetTrigger(params *GetTriggerParams, authInfo runtime.ClientAuthInfoWriter) (*GetTriggerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTriggerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTrigger",
		Method:             "GET",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/triggers/{triggerLocator}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTriggerReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTriggerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getTrigger: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetTriggerSetting get trigger setting API
*/
func (a *Client) GetTriggerSetting(params *GetTriggerSettingParams, authInfo runtime.ClientAuthInfoWriter) (*GetTriggerSettingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTriggerSettingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTriggerSetting",
		Method:             "GET",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/triggers/{triggerLocator}/{fieldName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTriggerSettingReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTriggerSettingOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getTriggerSetting: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetTriggers get triggers API
*/
func (a *Client) GetTriggers(params *GetTriggersParams, authInfo runtime.ClientAuthInfoWriter) (*GetTriggersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTriggersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTriggers",
		Method:             "GET",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/triggers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTriggersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTriggersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getTriggers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetVCSLabelingOptions get v c s labeling options API
*/
func (a *Client) GetVCSLabelingOptions(params *GetVCSLabelingOptionsParams, authInfo runtime.ClientAuthInfoWriter) (*GetVCSLabelingOptionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVCSLabelingOptionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getVCSLabelingOptions",
		Method:             "GET",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/vcsLabeling",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetVCSLabelingOptionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetVCSLabelingOptionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getVCSLabelingOptions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetVcsRootEntries get vcs root entries API
*/
func (a *Client) GetVcsRootEntries(params *GetVcsRootEntriesParams, authInfo runtime.ClientAuthInfoWriter) (*GetVcsRootEntriesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVcsRootEntriesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getVcsRootEntries",
		Method:             "GET",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/vcs-root-entries",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetVcsRootEntriesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetVcsRootEntriesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getVcsRootEntries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetVcsRootEntry get vcs root entry API
*/
func (a *Client) GetVcsRootEntry(params *GetVcsRootEntryParams, authInfo runtime.ClientAuthInfoWriter) (*GetVcsRootEntryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVcsRootEntryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getVcsRootEntry",
		Method:             "GET",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/vcs-root-entries/{vcsRootLocator}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetVcsRootEntryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetVcsRootEntryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getVcsRootEntry: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetVcsRootEntryCheckoutRules get vcs root entry checkout rules API
*/
func (a *Client) GetVcsRootEntryCheckoutRules(params *GetVcsRootEntryCheckoutRulesParams, authInfo runtime.ClientAuthInfoWriter) (*GetVcsRootEntryCheckoutRulesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVcsRootEntryCheckoutRulesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getVcsRootEntryCheckoutRules",
		Method:             "GET",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/vcs-root-entries/{vcsRootLocator}/checkout-rules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetVcsRootEntryCheckoutRulesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetVcsRootEntryCheckoutRulesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getVcsRootEntryCheckoutRules: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RemoveAllTemplates remove all templates API
*/
func (a *Client) RemoveAllTemplates(params *RemoveAllTemplatesParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRemoveAllTemplatesParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "removeAllTemplates",
		Method:             "DELETE",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/templates",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RemoveAllTemplatesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

/*
  RemoveTemplate remove template API
*/
func (a *Client) RemoveTemplate(params *RemoveTemplateParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRemoveTemplateParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "removeTemplate",
		Method:             "DELETE",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/templates/{templateLocator}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RemoveTemplateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

/*
  ReplaceAgentRequirement replace agent requirement API
*/
func (a *Client) ReplaceAgentRequirement(params *ReplaceAgentRequirementParams, authInfo runtime.ClientAuthInfoWriter) (*ReplaceAgentRequirementOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceAgentRequirementParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "replaceAgentRequirement",
		Method:             "PUT",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/agent-requirements/{agentRequirementLocator}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReplaceAgentRequirementReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReplaceAgentRequirementOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for replaceAgentRequirement: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceAgentRequirements replace agent requirements API
*/
func (a *Client) ReplaceAgentRequirements(params *ReplaceAgentRequirementsParams, authInfo runtime.ClientAuthInfoWriter) (*ReplaceAgentRequirementsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceAgentRequirementsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "replaceAgentRequirements",
		Method:             "PUT",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/agent-requirements",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReplaceAgentRequirementsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReplaceAgentRequirementsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for replaceAgentRequirements: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceArtifactDep replace artifact dep API
*/
func (a *Client) ReplaceArtifactDep(params *ReplaceArtifactDepParams, authInfo runtime.ClientAuthInfoWriter) (*ReplaceArtifactDepOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceArtifactDepParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "replaceArtifactDep",
		Method:             "PUT",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/artifact-dependencies/{artifactDepLocator}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReplaceArtifactDepReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReplaceArtifactDepOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for replaceArtifactDep: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceArtifactDeps replace artifact deps API
*/
func (a *Client) ReplaceArtifactDeps(params *ReplaceArtifactDepsParams, authInfo runtime.ClientAuthInfoWriter) (*ReplaceArtifactDepsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceArtifactDepsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "replaceArtifactDeps",
		Method:             "PUT",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/artifact-dependencies",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReplaceArtifactDepsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReplaceArtifactDepsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for replaceArtifactDeps: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceFeature replace feature API
*/
func (a *Client) ReplaceFeature(params *ReplaceFeatureParams, authInfo runtime.ClientAuthInfoWriter) (*ReplaceFeatureOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceFeatureParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "replaceFeature",
		Method:             "PUT",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/features/{featureId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReplaceFeatureReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReplaceFeatureOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for replaceFeature: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceFeatureParameters replace feature parameters API
*/
func (a *Client) ReplaceFeatureParameters(params *ReplaceFeatureParametersParams, authInfo runtime.ClientAuthInfoWriter) (*ReplaceFeatureParametersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceFeatureParametersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "replaceFeatureParameters",
		Method:             "PUT",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/features/{featureId}/parameters",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReplaceFeatureParametersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReplaceFeatureParametersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for replaceFeatureParameters: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceFeatures replace features API
*/
func (a *Client) ReplaceFeatures(params *ReplaceFeaturesParams, authInfo runtime.ClientAuthInfoWriter) (*ReplaceFeaturesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceFeaturesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "replaceFeatures",
		Method:             "PUT",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/features",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReplaceFeaturesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReplaceFeaturesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for replaceFeatures: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceSnapshotDep replace snapshot dep API
*/
func (a *Client) ReplaceSnapshotDep(params *ReplaceSnapshotDepParams, authInfo runtime.ClientAuthInfoWriter) (*ReplaceSnapshotDepOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceSnapshotDepParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "replaceSnapshotDep",
		Method:             "PUT",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/snapshot-dependencies/{snapshotDepLocator}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReplaceSnapshotDepReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReplaceSnapshotDepOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for replaceSnapshotDep: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceSnapshotDeps replace snapshot deps API
*/
func (a *Client) ReplaceSnapshotDeps(params *ReplaceSnapshotDepsParams, authInfo runtime.ClientAuthInfoWriter) (*ReplaceSnapshotDepsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceSnapshotDepsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "replaceSnapshotDeps",
		Method:             "PUT",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/snapshot-dependencies",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReplaceSnapshotDepsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReplaceSnapshotDepsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for replaceSnapshotDeps: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceStep replace step API
*/
func (a *Client) ReplaceStep(params *ReplaceStepParams, authInfo runtime.ClientAuthInfoWriter) (*ReplaceStepOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceStepParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "replaceStep",
		Method:             "PUT",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/steps/{stepId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReplaceStepReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReplaceStepOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for replaceStep: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceStepParameters replace step parameters API
*/
func (a *Client) ReplaceStepParameters(params *ReplaceStepParametersParams, authInfo runtime.ClientAuthInfoWriter) (*ReplaceStepParametersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceStepParametersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "replaceStepParameters",
		Method:             "PUT",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/steps/{stepId}/parameters",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReplaceStepParametersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReplaceStepParametersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for replaceStepParameters: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceSteps replace steps API
*/
func (a *Client) ReplaceSteps(params *ReplaceStepsParams, authInfo runtime.ClientAuthInfoWriter) (*ReplaceStepsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceStepsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "replaceSteps",
		Method:             "PUT",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/steps",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReplaceStepsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReplaceStepsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for replaceSteps: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceTrigger replace trigger API
*/
func (a *Client) ReplaceTrigger(params *ReplaceTriggerParams, authInfo runtime.ClientAuthInfoWriter) (*ReplaceTriggerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceTriggerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "replaceTrigger",
		Method:             "PUT",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/triggers/{triggerLocator}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReplaceTriggerReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReplaceTriggerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for replaceTrigger: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceTriggers replace triggers API
*/
func (a *Client) ReplaceTriggers(params *ReplaceTriggersParams, authInfo runtime.ClientAuthInfoWriter) (*ReplaceTriggersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceTriggersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "replaceTriggers",
		Method:             "PUT",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/triggers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReplaceTriggersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReplaceTriggersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for replaceTriggers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceVcsRootEntries replace vcs root entries API
*/
func (a *Client) ReplaceVcsRootEntries(params *ReplaceVcsRootEntriesParams, authInfo runtime.ClientAuthInfoWriter) (*ReplaceVcsRootEntriesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceVcsRootEntriesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "replaceVcsRootEntries",
		Method:             "PUT",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/vcs-root-entries",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReplaceVcsRootEntriesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReplaceVcsRootEntriesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for replaceVcsRootEntries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ServeBranches serve branches API
*/
func (a *Client) ServeBranches(params *ServeBranchesParams, authInfo runtime.ClientAuthInfoWriter) (*ServeBranchesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServeBranchesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "serveBranches",
		Method:             "GET",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/branches",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ServeBranchesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ServeBranchesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for serveBranches: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ServeBuildField serve build field API
*/
func (a *Client) ServeBuildField(params *ServeBuildFieldParams, authInfo runtime.ClientAuthInfoWriter) (*ServeBuildFieldOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServeBuildFieldParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "serveBuildField",
		Method:             "GET",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/builds/{buildLocator}/{field}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ServeBuildFieldReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ServeBuildFieldOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for serveBuildField: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ServeBuildTypeBuildsTags serve build type builds tags API
*/
func (a *Client) ServeBuildTypeBuildsTags(params *ServeBuildTypeBuildsTagsParams, authInfo runtime.ClientAuthInfoWriter) (*ServeBuildTypeBuildsTagsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServeBuildTypeBuildsTagsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "serveBuildTypeBuildsTags",
		Method:             "GET",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/buildTags",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ServeBuildTypeBuildsTagsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ServeBuildTypeBuildsTagsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for serveBuildTypeBuildsTags: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ServeBuildTypeField serve build type field API
*/
func (a *Client) ServeBuildTypeField(params *ServeBuildTypeFieldParams, authInfo runtime.ClientAuthInfoWriter) (*ServeBuildTypeFieldOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServeBuildTypeFieldParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "serveBuildTypeField",
		Method:             "GET",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/{field}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ServeBuildTypeFieldReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ServeBuildTypeFieldOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for serveBuildTypeField: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ServeBuildTypeXML serve build type XML API
*/
func (a *Client) ServeBuildTypeXML(params *ServeBuildTypeXMLParams, authInfo runtime.ClientAuthInfoWriter) (*ServeBuildTypeXMLOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServeBuildTypeXMLParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "serveBuildTypeXML",
		Method:             "GET",
		PathPattern:        "/app/rest/buildTypes/{btLocator}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ServeBuildTypeXMLReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ServeBuildTypeXMLOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for serveBuildTypeXML: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SetBuildTypeField set build type field API
*/
func (a *Client) SetBuildTypeField(params *SetBuildTypeFieldParams, authInfo runtime.ClientAuthInfoWriter) (*SetBuildTypeFieldOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetBuildTypeFieldParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "setBuildTypeField",
		Method:             "PUT",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/{field}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SetBuildTypeFieldReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetBuildTypeFieldOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for setBuildTypeField: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SetTemplates set templates API
*/
func (a *Client) SetTemplates(params *SetTemplatesParams, authInfo runtime.ClientAuthInfoWriter) (*SetTemplatesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetTemplatesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "setTemplates",
		Method:             "PUT",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/templates",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SetTemplatesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetTemplatesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for setTemplates: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SetVCSLabelingOptions set v c s labeling options API
*/
func (a *Client) SetVCSLabelingOptions(params *SetVCSLabelingOptionsParams, authInfo runtime.ClientAuthInfoWriter) (*SetVCSLabelingOptionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetVCSLabelingOptionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "setVCSLabelingOptions",
		Method:             "PUT",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/vcsLabeling",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SetVCSLabelingOptionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetVCSLabelingOptionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for setVCSLabelingOptions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateVcsRootEntry update vcs root entry API
*/
func (a *Client) UpdateVcsRootEntry(params *UpdateVcsRootEntryParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateVcsRootEntryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateVcsRootEntryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateVcsRootEntry",
		Method:             "PUT",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/vcs-root-entries/{vcsRootLocator}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateVcsRootEntryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateVcsRootEntryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateVcsRootEntry: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateVcsRootEntryCheckoutRules update vcs root entry checkout rules API
*/
func (a *Client) UpdateVcsRootEntryCheckoutRules(params *UpdateVcsRootEntryCheckoutRulesParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateVcsRootEntryCheckoutRulesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateVcsRootEntryCheckoutRulesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateVcsRootEntryCheckoutRules",
		Method:             "PUT",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/vcs-root-entries/{vcsRootLocator}/checkout-rules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateVcsRootEntryCheckoutRulesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateVcsRootEntryCheckoutRulesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateVcsRootEntryCheckoutRules: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
