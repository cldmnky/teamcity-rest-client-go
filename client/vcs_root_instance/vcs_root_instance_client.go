// Code generated by go-swagger; DO NOT EDIT.

package vcs_root_instance

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new vcs root instance API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for vcs root instance API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteInstanceField(params *DeleteInstanceFieldParams, authInfo runtime.ClientAuthInfoWriter) error

	DeleteRepositoryState(params *DeleteRepositoryStateParams, authInfo runtime.ClientAuthInfoWriter) error

	GetChildren(params *GetChildrenParams, authInfo runtime.ClientAuthInfoWriter) (*GetChildrenOK, error)

	GetChildrenAlias(params *GetChildrenAliasParams, authInfo runtime.ClientAuthInfoWriter) (*GetChildrenAliasOK, error)

	GetContent(params *GetContentParams, authInfo runtime.ClientAuthInfoWriter) error

	GetContentAlias(params *GetContentAliasParams, authInfo runtime.ClientAuthInfoWriter) error

	GetMetadata(params *GetMetadataParams, authInfo runtime.ClientAuthInfoWriter) (*GetMetadataOK, error)

	GetRepositoryState(params *GetRepositoryStateParams, authInfo runtime.ClientAuthInfoWriter) (*GetRepositoryStateOK, error)

	GetRepositoryStateCreationDate(params *GetRepositoryStateCreationDateParams, authInfo runtime.ClientAuthInfoWriter) (*GetRepositoryStateCreationDateOK, error)

	GetRoot(params *GetRootParams, authInfo runtime.ClientAuthInfoWriter) (*GetRootOK, error)

	GetZipped(params *GetZippedParams, authInfo runtime.ClientAuthInfoWriter) error

	ScheduleCheckingForChanges(params *ScheduleCheckingForChangesParams, authInfo runtime.ClientAuthInfoWriter) error

	ServeInstance(params *ServeInstanceParams, authInfo runtime.ClientAuthInfoWriter) (*ServeInstanceOK, error)

	ServeInstances(params *ServeInstancesParams, authInfo runtime.ClientAuthInfoWriter) (*ServeInstancesOK, error)

	SetRepositoryState(params *SetRepositoryStateParams, authInfo runtime.ClientAuthInfoWriter) (*SetRepositoryStateOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  DeleteInstanceField delete instance field API
*/
func (a *Client) DeleteInstanceField(params *DeleteInstanceFieldParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteInstanceFieldParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteInstanceField",
		Method:             "DELETE",
		PathPattern:        "/app/rest/vcs-root-instances/{vcsRootInstanceLocator}/{field}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteInstanceFieldReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

/*
  DeleteRepositoryState delete repository state API
*/
func (a *Client) DeleteRepositoryState(params *DeleteRepositoryStateParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteRepositoryStateParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteRepositoryState",
		Method:             "DELETE",
		PathPattern:        "/app/rest/vcs-root-instances/{vcsRootInstanceLocator}/repositoryState",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteRepositoryStateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

/*
  GetChildren get children API
*/
func (a *Client) GetChildren(params *GetChildrenParams, authInfo runtime.ClientAuthInfoWriter) (*GetChildrenOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetChildrenParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getChildren",
		Method:             "GET",
		PathPattern:        "/app/rest/vcs-root-instances/{vcsRootInstanceLocator}/files/latest/children{path}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetChildrenReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetChildrenOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getChildren: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetChildrenAlias get children alias API
*/
func (a *Client) GetChildrenAlias(params *GetChildrenAliasParams, authInfo runtime.ClientAuthInfoWriter) (*GetChildrenAliasOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetChildrenAliasParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getChildrenAlias",
		Method:             "GET",
		PathPattern:        "/app/rest/vcs-root-instances/{vcsRootInstanceLocator}/files/latest/{path}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetChildrenAliasReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetChildrenAliasOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getChildrenAlias: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetContent get content API
*/
func (a *Client) GetContent(params *GetContentParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetContentParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getContent",
		Method:             "GET",
		PathPattern:        "/app/rest/vcs-root-instances/{vcsRootInstanceLocator}/files/latest/content{path}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetContentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

/*
  GetContentAlias get content alias API
*/
func (a *Client) GetContentAlias(params *GetContentAliasParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetContentAliasParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getContentAlias",
		Method:             "GET",
		PathPattern:        "/app/rest/vcs-root-instances/{vcsRootInstanceLocator}/files/latest/files{path}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetContentAliasReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

/*
  GetMetadata get metadata API
*/
func (a *Client) GetMetadata(params *GetMetadataParams, authInfo runtime.ClientAuthInfoWriter) (*GetMetadataOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMetadataParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getMetadata",
		Method:             "GET",
		PathPattern:        "/app/rest/vcs-root-instances/{vcsRootInstanceLocator}/files/latest/metadata{path}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMetadataReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetMetadataOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getMetadata: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetRepositoryState get repository state API
*/
func (a *Client) GetRepositoryState(params *GetRepositoryStateParams, authInfo runtime.ClientAuthInfoWriter) (*GetRepositoryStateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRepositoryStateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getRepositoryState",
		Method:             "GET",
		PathPattern:        "/app/rest/vcs-root-instances/{vcsRootInstanceLocator}/repositoryState",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRepositoryStateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRepositoryStateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getRepositoryState: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetRepositoryStateCreationDate get repository state creation date API
*/
func (a *Client) GetRepositoryStateCreationDate(params *GetRepositoryStateCreationDateParams, authInfo runtime.ClientAuthInfoWriter) (*GetRepositoryStateCreationDateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRepositoryStateCreationDateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getRepositoryStateCreationDate",
		Method:             "GET",
		PathPattern:        "/app/rest/vcs-root-instances/{vcsRootInstanceLocator}/repositoryState/creationDate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRepositoryStateCreationDateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRepositoryStateCreationDateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getRepositoryStateCreationDate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetRoot get root API
*/
func (a *Client) GetRoot(params *GetRootParams, authInfo runtime.ClientAuthInfoWriter) (*GetRootOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRootParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getRoot",
		Method:             "GET",
		PathPattern:        "/app/rest/vcs-root-instances/{vcsRootInstanceLocator}/files/latest",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRootReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRootOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getRoot: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetZipped get zipped API
*/
func (a *Client) GetZipped(params *GetZippedParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetZippedParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getZipped",
		Method:             "GET",
		PathPattern:        "/app/rest/vcs-root-instances/{vcsRootInstanceLocator}/files/latest/archived{path}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetZippedReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

/*
  ScheduleCheckingForChanges schedule checking for changes API
*/
func (a *Client) ScheduleCheckingForChanges(params *ScheduleCheckingForChangesParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewScheduleCheckingForChangesParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "scheduleCheckingForChanges",
		Method:             "POST",
		PathPattern:        "/app/rest/vcs-root-instances/commitHookNotification",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ScheduleCheckingForChangesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

/*
  ServeInstance serve instance API
*/
func (a *Client) ServeInstance(params *ServeInstanceParams, authInfo runtime.ClientAuthInfoWriter) (*ServeInstanceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServeInstanceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "serveInstance",
		Method:             "GET",
		PathPattern:        "/app/rest/vcs-root-instances/{vcsRootInstanceLocator}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ServeInstanceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ServeInstanceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for serveInstance: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ServeInstances serve instances API
*/
func (a *Client) ServeInstances(params *ServeInstancesParams, authInfo runtime.ClientAuthInfoWriter) (*ServeInstancesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServeInstancesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "serveInstances",
		Method:             "GET",
		PathPattern:        "/app/rest/vcs-root-instances",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ServeInstancesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ServeInstancesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for serveInstances: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SetRepositoryState set repository state API
*/
func (a *Client) SetRepositoryState(params *SetRepositoryStateParams, authInfo runtime.ClientAuthInfoWriter) (*SetRepositoryStateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetRepositoryStateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "setRepositoryState",
		Method:             "PUT",
		PathPattern:        "/app/rest/vcs-root-instances/{vcsRootInstanceLocator}/repositoryState",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SetRepositoryStateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetRepositoryStateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for setRepositoryState: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
