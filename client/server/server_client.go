// Code generated by go-swagger; DO NOT EDIT.

package server

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new server API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for server API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	AddLicenseKeys(params *AddLicenseKeysParams, authInfo runtime.ClientAuthInfoWriter) (*AddLicenseKeysOK, error)

	DeleteLicenseKey(params *DeleteLicenseKeyParams, authInfo runtime.ClientAuthInfoWriter) error

	GetBackupStatus(params *GetBackupStatusParams, authInfo runtime.ClientAuthInfoWriter) (*GetBackupStatusOK, error)

	GetLicenseKey(params *GetLicenseKeyParams, authInfo runtime.ClientAuthInfoWriter) (*GetLicenseKeyOK, error)

	GetLicenseKeys(params *GetLicenseKeysParams, authInfo runtime.ClientAuthInfoWriter) (*GetLicenseKeysOK, error)

	GetLicensingData(params *GetLicensingDataParams, authInfo runtime.ClientAuthInfoWriter) (*GetLicensingDataOK, error)

	ServeMetrics(params *ServeMetricsParams, authInfo runtime.ClientAuthInfoWriter) (*ServeMetricsOK, error)

	ServePlugins(params *ServePluginsParams, authInfo runtime.ClientAuthInfoWriter) (*ServePluginsOK, error)

	ServeServerInfo(params *ServeServerInfoParams, authInfo runtime.ClientAuthInfoWriter) (*ServeServerInfoOK, error)

	ServeServerVersion(params *ServeServerVersionParams, authInfo runtime.ClientAuthInfoWriter) (*ServeServerVersionOK, error)

	StartBackup(params *StartBackupParams, authInfo runtime.ClientAuthInfoWriter) (*StartBackupOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  AddLicenseKeys add license keys API
*/
func (a *Client) AddLicenseKeys(params *AddLicenseKeysParams, authInfo runtime.ClientAuthInfoWriter) (*AddLicenseKeysOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddLicenseKeysParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addLicenseKeys",
		Method:             "POST",
		PathPattern:        "/app/rest/server/licensingData/licenseKeys",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddLicenseKeysReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddLicenseKeysOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for addLicenseKeys: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteLicenseKey delete license key API
*/
func (a *Client) DeleteLicenseKey(params *DeleteLicenseKeyParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteLicenseKeyParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteLicenseKey",
		Method:             "DELETE",
		PathPattern:        "/app/rest/server/licensingData/licenseKeys/{licenseKey}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteLicenseKeyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

/*
  GetBackupStatus get backup status API
*/
func (a *Client) GetBackupStatus(params *GetBackupStatusParams, authInfo runtime.ClientAuthInfoWriter) (*GetBackupStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBackupStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getBackupStatus",
		Method:             "GET",
		PathPattern:        "/app/rest/server/backup",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetBackupStatusReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBackupStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getBackupStatus: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetLicenseKey get license key API
*/
func (a *Client) GetLicenseKey(params *GetLicenseKeyParams, authInfo runtime.ClientAuthInfoWriter) (*GetLicenseKeyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLicenseKeyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getLicenseKey",
		Method:             "GET",
		PathPattern:        "/app/rest/server/licensingData/licenseKeys/{licenseKey}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetLicenseKeyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLicenseKeyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getLicenseKey: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetLicenseKeys get license keys API
*/
func (a *Client) GetLicenseKeys(params *GetLicenseKeysParams, authInfo runtime.ClientAuthInfoWriter) (*GetLicenseKeysOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLicenseKeysParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getLicenseKeys",
		Method:             "GET",
		PathPattern:        "/app/rest/server/licensingData/licenseKeys",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetLicenseKeysReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLicenseKeysOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getLicenseKeys: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetLicensingData get licensing data API
*/
func (a *Client) GetLicensingData(params *GetLicensingDataParams, authInfo runtime.ClientAuthInfoWriter) (*GetLicensingDataOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLicensingDataParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getLicensingData",
		Method:             "GET",
		PathPattern:        "/app/rest/server/licensingData",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetLicensingDataReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLicensingDataOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getLicensingData: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ServeMetrics serve metrics API
*/
func (a *Client) ServeMetrics(params *ServeMetricsParams, authInfo runtime.ClientAuthInfoWriter) (*ServeMetricsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServeMetricsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "serveMetrics",
		Method:             "GET",
		PathPattern:        "/app/rest/server/metrics",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ServeMetricsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ServeMetricsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for serveMetrics: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ServePlugins serve plugins API
*/
func (a *Client) ServePlugins(params *ServePluginsParams, authInfo runtime.ClientAuthInfoWriter) (*ServePluginsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServePluginsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "servePlugins",
		Method:             "GET",
		PathPattern:        "/app/rest/server/plugins",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ServePluginsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ServePluginsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for servePlugins: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ServeServerInfo serve server info API
*/
func (a *Client) ServeServerInfo(params *ServeServerInfoParams, authInfo runtime.ClientAuthInfoWriter) (*ServeServerInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServeServerInfoParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "serveServerInfo",
		Method:             "GET",
		PathPattern:        "/app/rest/server",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ServeServerInfoReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ServeServerInfoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for serveServerInfo: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ServeServerVersion serve server version API
*/
func (a *Client) ServeServerVersion(params *ServeServerVersionParams, authInfo runtime.ClientAuthInfoWriter) (*ServeServerVersionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServeServerVersionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "serveServerVersion",
		Method:             "GET",
		PathPattern:        "/app/rest/server/{field}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ServeServerVersionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ServeServerVersionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for serveServerVersion: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StartBackup start backup API
*/
func (a *Client) StartBackup(params *StartBackupParams, authInfo runtime.ClientAuthInfoWriter) (*StartBackupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStartBackupParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "startBackup",
		Method:             "POST",
		PathPattern:        "/app/rest/server/backup",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StartBackupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StartBackupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for startBackup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
